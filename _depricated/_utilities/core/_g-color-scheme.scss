//*** THESE ARE THE CORE COLOR FUNCTIONS BUILT TO WORK WITH OR WITHOUT CHROMA SASS
//*** Dependancies: Chroma Sass

$default-accent-selector: 'h1, h2, h3, h4, h5, h6,a ' !default;
$default-svg-selector: 'path, g,circle' !default;
$default-svg-hover-selector: 'path:hover, g:hover' !default;

$property-lookup-map: (
    foreground: color,
    background: background-color,
    accent: color,
    border: border-color,
    link: color,
    fill: fill,
    hover-background: background-color,
    hover-foreground: color,
    hover-fill: fill
);

$fallback-lookup-map: (
    border: foreground,
    fill:foreground,
    hover-background: background,
    hover-foreground: foreground,
    hover-fill: foreground
);

$inverted-key-lookup-map: (
    foreground: background,
    background: foreground,
    accent: accent,
    border: background,
    link: accent,
    fill: background
);

%border-defaults {
    border-style: solid;
    border-width: 1px;
}

@function get-fallback-property($key) {
    @return map-get($fallback-lookup-map, $key);
}

@function get-lookup-property($key) {
    @return map-get($property-lookup-map, $key);
}

@function get-inverted-scheme-key($key) {
    @return map-get($inverted-key-lookup-map, $key);
}

@function get-inverted-colormap( $base-scheme: $chroma-active-scheme ) {

    $new-colors: (
        foreground: color($base-scheme, get-inverted-scheme-key(foreground)),
        background: color($base-scheme, get-inverted-scheme-key(background)),
        accent: color($base-scheme, get-inverted-scheme-key(accent)),
        border: color($base-scheme, get-inverted-scheme-key(background))
    );
    @return $new-colors;
}

@mixin write-scheme-property($property: foreground, $value: false,  $selector: false, $colorfunc: false, $colorfuncArgs:false, $selector-at-root: false  ) {

    $property-to-write: get-lookup-property($property);

    $value-to-write: $value;

    @if ($value-to-write and type-of($colorfunc)== string  and function-exists($colorfunc) and $colorfuncArgs != false) {
        $value-to-write: call(get-function($colorfunc), $value-to-write, $colorfuncArgs);
    }

    @if ($selector-at-root and $selector  and $value-to-write and $property-to-write) {
        @at-root {
            #{$selector} {
                #{$property-to-write} : #{$value-to-write};
                @content;
            }
        }

    } @else if ($selector  and $value-to-write and $property-to-write) {
        #{$selector} {
            #{$property-to-write} : #{$value-to-write};
            @content;
        }
    } @else if ($value-to-write and $property-to-write) {
        #{$property-to-write} : #{$value-to-write};
        @content;
    }
}

@function get-current-scheme-color-by-string($color-key, $value, $color-scheme:$chroma-active-scheme ) {

    //check to see if string is the name of a color scheme OR a key to color in the current one...

    //
    @if (type-of($value) == string) {

        @if (chroma-has-scheme($value)) {

            //value is the name of a color scheme
            @return color($value, $color-key);

        } @else if (chroma-has-color($value, $color-scheme)) {

            @return color($color-scheme, $value);

        } @else {
            @debug "ALERT! key: #{$color-key} value: #{$value} is not a valid colorscheme or a another color present in current scheme";
        }

    } @else {
        @return false;
    }

}

@function get-current-scheme-color($color-key, $value, $color-scheme:$chroma-active-scheme ) {
    ///route through here based on variable datatypes

    @if ($value == true) {

        ///see if scheme has color value for key
        @if (chroma-has-color($color-key, $color-scheme)) {
            @return color($color-scheme, $color-key);
        } @else {
            $fallback-key: get-fallback-property($color-key);

            // @debug "****** ALERT!  key: #{$color-key} not valid in scheme: #{$color-scheme} , trying fallback key: #{$fallback-key}";

            @if (chroma-has-color($fallback-key, $color-scheme)) {

                // @debug "----fallback for key #{$color-key} to #{$fallback-key} in scheme #{$color-scheme} was successful";
                @return color($color-scheme, $fallback-key);

            } @else {
                @return false;
            }
        }

    } @else if (type-of($value) == string) {

        @if (chroma-has-color($value, $color-scheme)) {
            @return get-current-scheme-color-by-string($color-key, $value, $color-scheme);
        } @else {
            // @debug "ALERT!  value: #{$value} is not a valid color present in scheme: #{$color-scheme}";
            @return false;
        }

    } @else if (type-of($value) == color) {
        @return $value;
    } @else {
        @return false;
    }
}

@mixin g-color-scheme($color-scheme:$chroma-active-scheme, $background:true, $foreground:true,$accent:false, $border:false,$hover-background:false,$hover-foreground:false,$hover-fill:false, $fill:false, $stroke:false,$accent-selector:$default-accent-selector, $border-size: 1px ) {

    @include write-scheme-property(background, get-current-scheme-color(background, $background, $color-scheme));

    @include write-scheme-property(foreground, get-current-scheme-color(foreground, $foreground, $color-scheme));

    @include write-scheme-property(accent, get-current-scheme-color(accent, $accent, $color-scheme), $accent-selector);

    @include write-scheme-property(border, get-current-scheme-color(border, $border, $color-scheme)) {
        @extend %border-defaults;
    }
    @include write-scheme-property(fill, get-current-scheme-color(fill, $fill, $color-scheme), $default-svg-selector);

    ///******HOVER FUNCTIONS>
    @include write-scheme-property(hover-background, get-current-scheme-color(hover-background, $hover-background, $color-scheme), '#{&}:hover', false, false, true);

    @include write-scheme-property(hover-foreground, get-current-scheme-color(hover-foreground, $hover-foreground, $color-scheme), '#{&}:hover', false, false, true);

    @include write-scheme-property(hover-fill, get-current-scheme-color(hover-fill, $hover-fill, $color-scheme), '#{&}:hover #{$default-svg-selector}', false, false, true);

}