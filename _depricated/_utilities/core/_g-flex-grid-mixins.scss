//this is ultra simple flexbox layout that sets a calc width with margin-right gutters.
// Can be used for repeated items and a single row 'grid' (ratios), gutters do not repeat on outer edge
//Gillian

//default variables
$column-system-list: 2,3,4,5,6,8,12 !default;
$generate-col-placeholders: true !default;


$base-list-parent-configuration:(
	width: 100%,
	flex-direction: row,
	flex-wrap: wrap,
	align-content: flex-start,
)!default;

$base-list-configuration: (
	items-per-row: 5,
	items-per-column:auto,
	width: auto,
	height: auto,
	gutter: 0px,
)!default;


@mixin make-flex-list-item($conf: (), $showGuides: true) {
	// Extending the default arguments with the given object
	$conf: extend($base-list-configuration, $conf);

	$items-per-row: map-get($conf, items-per-row);
	$items-per-column: map-get($conf, items-per-column);
	$gutter: (map-get($conf, gutter));

	//show guides =true helpful for debugging margins/padding
	@if ($showGuides == true) {
		$s-min: 20;
		$s-max: 70;
		$l-min: 30;
		$l-max: 90;
		border: 2px solid hsl(random(360), $s-min+random($s-max+-$s-min), $l-min+random($l-max+-$l-min));
	}

	@if (type-of($items-per-row) == number or type-of($items-per-row)== list  ) and (type-of($items-per-column) == number or type-of($items-per-column)== list  ) {
		@include grid-equal-set-rows-columns($conf, $items-per-row, $items-per-column, $gutter);
	}

	@if ($items-per-row == auto) {
		width: map-get($conf, width); //dont know if this is needed?
		@if (type-of($items-per-column) == number) {
			@include grid-equal-height-rows($conf, $items-per-column, $gutter);
		} @else if (type-of( $items-per-column )== list) {
			@include grid-ratio-height-rows($conf, $items-per-column, $gutter);
		}
	}

	@if ($items-per-column == auto) {
		height: map-get($conf, height);

		@if (type-of($items-per-row) == number) {
			//grid with  equal sized columns and flexible number of rows.
			@include grid-equal-width-columns($conf, $items-per-row, $gutter);

		} @else if (type-of(map-get($conf, items-per-row)) == list) {
			//grid with different sized columns and flexible number of rows.
			@include grid-ratio-width-columns($conf, $items-per-row, $gutter);
		}
	}
}

@function count-number-of-items($items:1) {
	@if (type_of($items) == number) {
		@return $items;
	}

	@if (type_of($items) == list) {
		@return length($items);
	}
}

@function count-total-units($items:1) {
	$number-of-items: length($items);

	//count total number of units
	$totalunits: 0;
	@each $value in $items {
		$totalunits: $totalunits + strip-unit($value);
	}
	@return $totalunits;
}

@mixin set-dimension($property:width, $items:3, $gutter :0px) {
	$number-of-items: count-number-of-items($items);

	@if (type_of($items) == number) {

		#{$property}: calc((100% - (#{$gutter * ( $items - 1) })) / #{$items});
	}

	@if (type_of($items) == list) {
		//total number of items
		// $number-of-items: length($items);

		$totalunits: count-total-units($items);
		@for $i from 1 through length($items) {
			&:nth-child( #{$number-of-items}n+#{$i}) {
				//calculate width of unequal sized items based on ratio.
				#{$property}: calc((100% - (#{$gutter * ( $number-of-items - 1) })) / #{$totalunits / nth($items, $i)});
			}
		}
	}
}

@mixin set-margins($itemsX:1,$gutterX:0px,$itemsY:auto,$gutterY:0px ) {
	@if (type_of($itemsX)==number) {
		margin-right: $gutterX;
		&:nth-child(#{$itemsX}n) {
			margin-right: 0;
		}
	} @else if ($itemsX==auto) {
		margin-right: $gutterX;
	}
	@if (type_of($itemsY)==number) {
		margin-bottom: $gutterY;
		&:nth-child(#{$itemsY}n) {
			margin-bottom: 0;
			background-color: blue;
		}
	} @else if ()
($itemsY == auto) {
	margin-bottom: $gutterY;
}
}

@mixin grid-equal-set-rows-columns($conf: (),$itemsX:'error', $itemsY:'error',$gutter:10px) { ///im seperating these out to avoid confusion

	//calculate height of equal sized items
	@include set-dimension(width, $itemsX, $gutter);
	@include set-dimension(height, $itemsY, $gutter);
	@include set-margins(count-number-of-items($itemsX), $gutter, count-number-of-items($itemsY), $gutter);

	&:nth-child(n+#{(count-number-of-items($itemsX) * count-number-of-items($itemsY))+1 }) {
		background-color: yellow;
		// display: none;
	}
}

@mixin grid-equal-height-rows($conf: (), $itemsY:'error',$gutter:0) { ///im seperating these out to avoid confusion

	//calculate height of equal sized items
	@include set-dimension(height, $itemsY, $gutter);
	@include set-margins(auto, $gutter, count-number-of-items($itemsY), $gutter);

}

@mixin grid-ratio-height-rows($conf: (), $itemsY:'error',$gutter:0) { ///im seperating these out to avoid confusion
	@include set-dimension(height, $itemsY, $gutter);
	@include set-margins(auto, $gutter, count-number-of-items($itemsY), $gutter);

}

@mixin grid-equal-width-columns($conf: (), $itemsX:'error',$gutter:0) { ///im seperating these out to avoid confusion

	//calculate width of equal sized items
	@include set-dimension(width, $itemsX, $gutter);
	@include set-margins(count-number-of-items($itemsX), $gutter, auto, $gutter);

}

@mixin grid-ratio-width-columns($conf: (), $itemsX:'error',$gutter:0) { ///im seperating these out to avoid confusion
	@include set-dimension(width, $itemsX, $gutter);
	@include set-margins(count-number-of-items($itemsX), $gutter, auto, $gutter);
}

@mixin make-flex-list($conf: ()) {
	// Extending the default arguments with the given object
	$conf: extend($base-list-parent-configuration, $conf);

	width: map-get($conf, width);
	display: flex;
	flex-direction: map-get($conf, flex-direction);
	flex-wrap: map-get($conf, flex-wrap);
	align-content: map-get($conf, align-content);
	justify-content: map-get($conf, justify-content);

}


//generates some REPETER class default placeholders
@mixin generate-grid-classes( $prefix: '.g-grid', $debug-grid:false, $base-configuration: $base-list-configuration) {
	@for $i from 1 through length($column-system-list) {
		$column-count: nth($column-system-list, $i);

		#{$prefix}-#{ $column-count } {

			@include make-flex-list((flex-wrap: nowrap));

			> * {
				@if ($debug-grid) {
					@include color-scheme(grid-helper);
				}
				@include make-flex-list-item(extend($base-configuration, (items-per-row: $column-count,gutter: rhythm(2))));
			}
		}
	}
}

/*
%repeater-post-list-2x3 {
    //wrapper for list of items that are all the same size.
    @include make-flex-list((
        width: auto,
        flex-direction: column,
        flex-wrap: wrap,
    ));
    $list-configuration: (
        items-per-row: auto,
        items-per-column: 3 1,
        width: 445px,
        gutter: 10px,
    );
    > .grid-item {
        @include breakpoint-range(md, ">=") { //applied to range of breakpoints md and larger..
            @include make-flex-list-item($list-configuration);
        }
        @include breakpoint-range(sm) { //applied to breakpoint sm
            @include make-flex-list-item(extend($list-configuration, (items-per-row: 2)));
        }
        @include breakpoint-range(xs) {
            @include make-flex-list-item(extend($list-configuration, (items-per-row: 1,)));
        }
    }
}
*/