@import "dependencies";
@import "project-variables";
//todo: fix this
@import "objects/objects";
@import "modules/core/module";
@import "modules/colors/module";
@import "modules/typography/module";
@import "modules/rhythm-spacing/module";
//@import "../g-Patternlab/modules/components/module";
@import "modules/generator/module";
@import "modules/unit-test/module";
//typekit
@import url('https://use.typekit.net/kxg6qeb.css');
$generate-map: (
	scheme-classes: false,
	swatch-classes: false,
	type-classes:false,
	rhythm-spacing:false,
	utility-static:false,
	components:false
);
@include init-color-module;

$example-functional-render-queue: (
	description: "INVERT FUNCTIONAL COLOR ",
	selector: '.-#{&}',
	parent: color-schemes,
	suffix:true
);


$example-component-render2:
	(
		description: "color schemes",
		selector: false,
		parent: color-schemes,
		variant-key: light dark,
		suffix:true,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:true,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)

		)

	);




$example-component-render: (
	(
		description: "color schemes",
		selector:false,
		parent: color-schemes,
		suffix:true,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:true,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)

		)

	),
	(
		description: "font size",
		selector: false,
		parent: font-size,
		variant-key: xl,
		suffix:false,
	)
);


/*********RENDER OBJECT FOR BASE COLOR SCHEMES + SWATCHES***********/
$color-module-render-queue: (
	(
		description: "color swatches",
		selector: '.color-swatches',
		parent: color-swatches
	),
	(
		description: "color schemes",
		selector: '.color-schemes-gilliN',
		parent: color-schemes,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:false,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)
		)
	)
);

$no-selectors:(
selector: false,
	suffix:false,
);

$no-selectors-test-obj:(
	selector: true,
		suffix:true,
);

///ADD COLORS
//add something to dictionary
$patternlab: batch-add-to-style-dictionary( $base-render-color-objs);

///ADD SIZING VALUES
$patternlab: batch-add-to-style-dictionary( $base-render-objects);


/*****************************************/
/*********EXAMPLE GENERTE QUEUE***********/

$GENERATE-QUEUE: false;

@if ( $GENERATE-QUEUE ) {
	/***------COLOR SCHEMES and SWATCHES-----****/
	@include render-queue(get-collection($color-module-render-queue));

	/***------TYPEOGRAPHY-----****/
	@include render-queue(get-collection(typography));

	/***------FONT SIZES-----****/
	@include render-queue(get-collection(font-size));

	/***-----PADDING-----****/
	@include render-queue(get-collection(base-spacing));

	.example{
		//TODO: BUG WITH OUTPUT of 2 items with the same unit overwriten.
		/*********EXAMPLE COMPONENT***********/
		$new-list: get-collection( (base-spacing, color-schemes, font-size),$no-selectors);
		$new-list: overwrite-collections( $new-list, (sm, dark, sm ), variant-key );
		@include render-queue($new-list);
	}
	.example-button{
		@include render-queue(get-collection($example-component-render));
	}
}
@debug "hi!hhkk++h";

%button-static{
	border-radius: 20px;

}

$the-placeholder: button-static;

.testing{
//	@include render-queue(get-collection($example-component-render2));
	@include render-queue(get-collection(base-padding base-margin $example-functional-render-queue, md lg false));

	@extend %#{$the-placeholder};
}
////NOTE:   NOBJECTS WITH NO_SELECTOR AND NO VARIANT KEY WILL ERROR.



//@debug get-collection(base-margin);

//$test-collection: get-collection($color-module-render-queue ,gillian-swatches gillian-colorz, selector);
//@include render-queue($test-collection);

//@debug get-lookup-prop(typography, font-serif, font-family);

//@debug $style-dictionary;
@include block(gbt, utility) {
	//@include render-queue(font-size, sm);
}

@mixin write-selector($selector: false,$bem-prefix:false) {
	@if ($selector and $bem-prefix) {
		@include block($selector, $bem-prefix) {

			--#{&}--{

			background: red;
		}
			@content;
		}

	} @else if ($selector) {
		#{$selector} {
			@content;
		}
	} @else {
		@content;
	}
}




@mixin render-component($collection, $name, $at-root: false ){


	@if ($at-root){
		@include write-selector($name, component){
			$self: &;
			$collection: get-collection($collection);
			@at-root{
				@include render-queue(get-collection($collection, #{$self},selector));
			}
		}
	}@else{
		@include write-selector($name, component){
				@include render-queue(get-collection($collection));
		}
	}
}

@include render-component($example-component-render, potter-button,true);