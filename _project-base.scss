@import "dependencies";
@import "project-variables";
//todo: fix this
@import "objects/objects";
@import "modules/core/module";
@import "modules/colors/module";
@import "modules/typography/module";
@import "modules/rhythm-spacing/module";
//@import "../g-Patternlab/modules/components/module";
@import "modules/generator/module";
@import "modules/unit-test/module";
//typekit
@import url('https://use.typekit.net/kxg6qeb.css');
$generate-map: (
	scheme-classes: false,
	swatch-classes: false,
	type-classes:false,
	rhythm-spacing:false,
	utility-static:false,
	components:false
);
@include init-color-module;

$functional-render-queue: (

		description: "INVERT FUNCTIONAL COLOR ",
		variant-key: invert-functional,
		selector:false,
		parent: color-schemes,
		render:(suffix:false)

);

/*,
(
description: "FONT SIZING  ",
variant-key: sm,
selector:false,
parent: font-size,
render:(suffix:false)
)*/

$generate-render-queue: (
	(
		description: "color swatches",
		selector: '.color-swatches',
		parent: color-swatches
	),
	(
		description: "color schemes",
		selector: '.color-schemes',
		parent: color-schemes,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:false,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)
		)
	)
);

$basic-component-render: (
	(
		description: "color schemes",
		selector: false,
		parent: color-schemes,
		variant-key: dark,
		render:(
			suffix:false,
		),
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:false,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)
		)
	),
	(
		description: "font size",
		selector: false,
		parent: font-size,
		variant-key: xl,
		render:(
			suffix:false,
		)
	)
);



$no-selectors-obj:(
selector: false,
render:(
suffix:false,
)
);

$no-selectors-test-obj:(
	selector: true,
	render:(
		suffix:true,
	)
);

///ADD COLORS

//add something to dictionary
$test: batch-add-to-style-dictionary( $base-render-color-objs);

///ADD SIZING VALUES
$test: batch-add-to-style-dictionary( $base-render-objects);


//// extend a dictionary item, for the genb  erator etc.
//@debug coalateCollections(merge-style-key( font-size color-schemes,  $no-selectors-obj), font-serif dark);

/*********EXAMPLE GENERTE QUEUE***********/
$generator-color-queue: extend-style-key( $generate-render-queue);
@include render-queue($generator-color-queue);

//EXAMPLE COMPONENT WITHOUT A SELECTOR..
.example{
	//$new-list: coalateCollections(merge-style-key( color-schemes font-size,  $no-selectors-obj) , font-serif dark);
	//@debug length($new-list);
	//$new-list:(merge-style-key( color-schemes font-size,  $no-selectors-obj));
	//$new-list: extend-style-key( color-test-2,$no-selectors-obj);

//TODO: BUG WITH OUTPUT of 2 items with the same unit overwriten.
	/*********EXAMPLE COMPONENT***********/
$new-list: extend-style-key( (padding-demo, color-schemes, font-size),$no-selectors-obj);
$new-list: extend-style-key( $new-list, (sm, dark, sm ), variant-key );
@include render-queue($new-list);
}



/*********PADDING GENERATOR EXAMPLE***********/
//@include render-queue(padding-demo);


//@debug get-rendered-data(transform-data(get-single-render-style-props(color-test, variants)...),);

///@debug " transform #{get-rendered-data(transform-data(get-single-render-style-props(color-test, variants)...),get-single-render-style-props(color-test, render)...)}";


//EXAMPLES:::::
.example1 {
	//use key "color-test" and render multiple variants within parent selector


	  // @include render-queue(extend-style-key( base-component-test,$basic-component-render));
	// @include render-queue(extend-style-key( color-test-2,$functional-render-queue));
}

//


//$generator-color-queue: extend-style-key( color-test-2,$generate-render-queue);



//$generator-component-test : extend-style-key( color-test-2,$functional-render-queue);

//@include render-queue( $generator-color-queue);
//@include render-queue( padding-demo);







//@debug $generator-component-test;
///@debug "HHHH";
@debug get-lookup-prop(typography, font-serif, font-family);

//@warn "#{choose-contrast-color(#200379)}";
.hi {

	//@include render-queue(base-component-test);


}

@include block(gbt, utility) {

	//@include render-queue(font-size, sm);
}


//@debug "AVAILABLE STYLES IN DICTIONARY ARE:#{_keys($style-dictionary)}";