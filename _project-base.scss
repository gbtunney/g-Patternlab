$base-line-height: 20px;
$relative-font-sizing: true !global;

@import "dependencies";

@import "project-variables";
//todo: fix this
@import "modules/core/module";
@import "modules/colors/module";
@import "modules/typography/module";
@import "modules/responsive/module";
@import "modules/rhythm-spacing/module";
@import "modules/components/module";
@import "modules/unit-test/module";
//@import "utilities/core/u-scheme-helper-classes";
//typekit
@import url('https://use.typekit.net/kxg6qeb.css');
$generate-map: (
	scheme-classes: false,
	swatch-classes: false,
	type-classes:false,
	rhythm-spacing:false,
	utility-static:false,
	components:false
);
@include init-color-module;
$example-functional-render-queue: (
	description: "INVERT FUNCTIONAL COLOR ",
	selector: '.-#{&}',
	parent: color-schemes,
	suffix:true
);

$example-component-render2: (
	description: "color schemes",
	selector: false,
	parent: color-schemes,
	variant-key: light dark,
	suffix:true,
	variants:(
		options: (
			obj: (
				background: true,
				foreground: true,
				accent:true,
				border: lighten foreground 10%,
				fill:foreground,
				hover-background:true,
				hover-foreground:true
			)
		)
	)
);

$example-component-render: (
	(
		description: "color schemes",
		selector:false,
		parent: color-schemes,
		suffix:true,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:true,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)
		)
	),
	(
		description: "font size",
		selector: false,
		parent: font-size,
		variant-key: xl,
		suffix:false,
	)
);

/*********RENDER OBJECT FOR BASE COLOR SCHEMES + SWATCHES***********/
$color-module-render-queue: (
	(
		description: "color swatches",
		selector: '.color-swatches',
		parent: color-swatches
	),
	(
		description: "color schemes",
		selector: '.color-schemes-gilliN',
		parent: color-schemes,
		variants:(
			options: (
				obj: (
					background: true,
					foreground: true,
					accent:false,
					border: lighten foreground 10%,
					fill:foreground,
					hover-background:true,
					hover-foreground:true
				)
			)
		)
	)
);

$no-selectors: (
	selector: false,
	suffix:false,
);

$no-selectors-test-obj: (
	selector: true,
	suffix:true,
);

///ADD COLORS
//add something to dictionary
$patternlab: batch-add-to-style-dictionary($base-render-color-objs);

///ADD SIZING VALUES
$patternlab: batch-add-to-style-dictionary($base-render-objects);

///multilevel "inheritance"
$patternlab: batch-add-to-style-dictionary(clean-collection(get-collection($secondary-objects), parent));

$patternlab: batch-add-to-style-dictionary(clean-collection(get-collection($generator-render-objects), parent));

$test: init-typography-module();

//TODO: move ths

/*****************************************/
/*********EXAMPLE GENERTE QUEUE***********/
/*
.testing {
	@include render-queue(get-collection($example-component-render2));
	@include render-queue(get-collection(base-padding base-margin $example-functional-render-queue, md lg false));
}

%button-static {
	border-radius: 20px;
}

$the-placeholder: button-static;
@include block(divider, component) {
	@each $key in $scheme-list {
		@include modifier($key) {
			///	@include c-divider($key);
		}
	}
}
*/



