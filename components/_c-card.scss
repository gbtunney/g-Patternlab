$component-name: 'Card';

@mixin c-card($id:$component-name, $color-scheme: $chroma-active-scheme ) {

	$self: &;

	///******** INCLUDE THEME (COLOR!) PROPERTIES HERE.
	//@include u-component-theme($id, $color-scheme) {
		@include color-scheme($color-scheme, true, false);
	//}
@include container-padding;
	//******** STATIC props here....
	@include u-component-properties($id) {
		display: inline-block;
		cursor: pointer;
		transition: all 0.3s ease;
		text-align: left;
		box-shadow: 0 6px 10px -5px rgba(0, 0, 0, 0.2);

		#{$self}:hover {
			transform: translateY(-5px);
			box-shadow: 0 20px 20px -15px rgba(0, 0, 0, 0.3);
		}
		#{$self}__header {
			background: purple;
		}

		#{$self}__image {
			max-width: 100%;
			height: auto;
		}
		#{$self}__content {

		}
		//*******NON STATIC props here....
		#{$self}__title {
			@extend %u-reset-rhythm;
			@include setType(2, font-san-serif);
			@include trailing-border();
			@include leader(1);
			@include trailer(1);
		}
		#{$self}__subtitle {
			@extend %u-reset-rhythm;
			@include setType(0, font-serif);
			@include leader(1);
			@include trailer(1);
		}
		#{$self}__body {
			margin-bottom: 0;
			background: orange;
		}
		#{$self}__footer {
			@include leading-border();
			@include u-stick-to(top right) {
				@include leader();
			}
		}

		#{u-header-selector()}, a {
			color: inherit;
			background: inherit;
		}
	}
	@content;
}



// ----------------------------------------
// !!CARD
// ----------------------------------------
/* ** !!CARD ** */

// Sometimes you need a container or wrapper for your components in which case you could use a class like this
// Important thing to understand here is that .c-card doesn't depend on .card-container
//.card-container is a helper in this situation, it helps us to keep the cards together

///styles to generate.

///MAIN BLOCK CSS

@include block($component-name, component) {
//	@if ($generate-components) {

	@include c-card($component-name);

		@each $key, $name in $THEME_RENDER_KEYS {
			@include modifier($key) {
				@include c-card($component-name,$key);
			}
		}
	//}
}

/*** THEME MODIFIERS	*/


/*

!***  MODIFIERS	*!
@include u-type-modifier($component-name, 0, font-small-caps);

#{f-modifier($component-name,'0-font-small-caps')}{

	a{
		@include setType(0, font-small-caps);

	}
}
@include u-modifier($component-name, centered-title) {
	//@include c-card(dark);

	#{f-element($component-name,title)}{
		@include setType(3, font-small-caps);
		text-align: center;
		@include horizontal-borders();
	}

	#{f-element($component-name,subtitle)}{
		text-align: center;
	}

}
///EXAMPLES
#{f-element($component-name,title)}{
	#{f-modifier($component-name,light)} & {
		//stuff
	}
}

#{f-modifier($component-name,light)} [class$="title"]:first-child{
	&{
		//background: red;
	}
}
!*#{f-element($component-name,content)} {

	@include u-stick-to(bottom right, f-element($component-name, subtitle)) {
	@extend %u-reset-rhythm;
	}
}*!
	#{f-element($component-name,subtitle)}{
		//@extend %u-reset-rhythm;
	}
*/

