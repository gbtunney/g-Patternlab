$component-name: 'Kabob';



@mixin c-kabob($id:$component-name, $color-scheme: $chroma-active-scheme,$reflect: false, $width: 100%,$divider:true, $unit: $default-scale-unit ) {

    $self: &;
    width: $width;

    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;

    @if ($reflect) {
        &__right {
            @include u-reflect-X();
        }
    }
    .--reflect &__right {
        @include u-reflect-X();
    }

    &__left, &__right {
        @include u-icon-svg(color($color-scheme, accent), ms($unit));
    }
    .--monochrome &__left, .--monochrome &__right {
        @include u-icon-svg(color($color-scheme, foreground), ms($unit));
    }

    .--xs &__left, .--xs &__right {
        @include set-multiple($scale-unit-xs, width height);
    }
    .--sm &__left, .--sm &__right {
        @include set-multiple($scale-unit-sm, width height);
    }
    .--md &__left, .--md &__right {
        @include set-multiple($scale-unit-md, width height);
    }
    .--lg &__left, .--lg &__right {
        @include set-multiple($scale-unit-lg, width height);
    }
    .--xl &__left, .--xl &__right {
        @include set-multiple($scale-unit-xl, width height);
    }

    &__inner {
        //float center text
        position: absolute;
        width: 100%;
        margin: 0 auto;

        .--no-divider & {
            position: relative;
            height: auto;
            margin: 0;
            padding: 0;
            * {
                padding: 0 rhythm($unit) * .25;
            }
        }

        * {
            background: color($color-scheme, background);
            outline: 1px solid color($color-scheme, background);
        }
    }

    @if ($divider){

        &__center {
            position: relative;
            display: grid;
            //  align-items: center;
            height: 100%;
            width: 100%;
            grid-template-columns: 100% 1fr 100%;

            &:after {
                display: block;
                width: 100%;
                height: rhythm($unit) * .1;
                background: color($color-scheme, foreground);
                content: " ";

                $multiplier: .1; ///size the line

                .--xs & {
                    height: rhythm($scale-unit-xs)  * $multiplier;
                }
                .--sm & {
                    height: rhythm($scale-unit-sm)  * $multiplier;
                }
                .--md & {
                    height: rhythm($scale-unit-md)  * $multiplier;
                }
                .--lg & {
                    height: rhythm($scale-unit-lg)  * $multiplier;
                }
                .--xl & {
                    height: rhythm($scale-unit-xl) * $multiplier;
                }
                .--no-divider & {
                    content: " ";
                    height: 0;
                    display: none;
                }
            }
        }
    }

    @content;
}

@include block($component-name, component) {
    @if ($generate-components) {
        @include c-kabob($component-name);
        @each $key, $name in $THEME_RENDER_KEYS {
            @include modifier($key) {
                @include c-kabob($component-name, $key);
            }
        }
    }
}