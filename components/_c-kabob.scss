$component-name: 'Kabob';



@mixin c-kabob($id:$component-name, $color-scheme: $chroma-active-scheme,$reflect: false, $width: 100%,$divider:true, $unit: $default-scale-unit ) {

    $self: &;
    width: $width;

    display: flex;
    align-items: center;
    cursor: pointer;
    transition: all 0.3s ease;

    @if ($reflect) {
        &__right {
            @include u-reflect-X();
        }
    }
    .--reflect &__right {
        @include u-reflect-X();
    }

    &__left, &__right {
        @include u-icon-svg(color($color-scheme, accent), ms($unit));
    }
    .--monochrome &__left, .--monochrome &__right {
        @include u-icon-svg(color($color-scheme, foreground), ms($unit));
    }

    /// .--xs &__left, .--xs &__right adds size flags
    @include g-generate-scale-sizes(  #{&}__right); //#{&}__left
    @include g-generate-scale-sizes(  #{&}__left); //#{&}__left


    &__inner {
        //float center text
        position: absolute;
        width: 100%;
        margin: 0 auto;

        .--no-divider & {
            position: relative;
            height: auto;
            margin: 0;
            padding: 0;
            * {
                padding: 0 rhythm($unit) * .25;
            }
        }

        * {
            background: color($color-scheme, background);
            outline: 1px solid color($color-scheme, background);
        }
    }

    @if ($divider){

    }

    @content;
}

@include block($component-name, component) {
    @if ($generate-components) {
        @include c-kabob($component-name);
        @each $key, $name in $THEME_RENDER_KEYS {
            @include modifier($key) {
                @include c-kabob($component-name, $key);
            }
        }
    }
}