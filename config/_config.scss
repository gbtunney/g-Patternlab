///MAP JSON CONFIG TO THE SETTINGS/VARIABLES.

//structure vars.
//@include setting-set-multiple($slicer);

//type vars
@include setting-set-multiple($typography);
$THEME_RENDER_KEYS: $render_component_themes;


$DRY_ENABLED:true!default;

@import "colors";
@import "structure";
@import "typography";

//TODO:move
$debug: false;
$generate-grid-placeholders: true!default;
$generate-swatch-placeholders: true!default;
$generate-type-placeholders: true!default;
$generate-scheme-placeholders:true!default;

$include-helper-classes:true!default;
$include-base-classes:true!default;
$include-styleguide-classes:true!default;
$include-font-icons:true!default;

$generate-components:true!default;

$bem-block-namespaces: (
    'object': 'o',     // defaults to 'o'
    'component': 'g', // defaults to 'c'
    'utility': 'u', // defaults to 'u'
);


@if($debug ) {
    $generate-grid-placeholders: false ;
    $generate-swatch-placeholders: false ;
    $generate-type-placeholders: false ;
    $generate-scheme-placeholders: false ;
    $generate-components:false;

    $include-helper-classes: false;
    $include-base-classes: false;
    $include-styleguide-classes: false;
    $include-font-icons:false;
}


//actually generate them

@if ($generate-swatch-placeholders) {
    @include generate-swatches();
}

@if ($generate-type-placeholders) {
    @each $key, $prop in $font-map {
        @if ($key != 'default') {
            @include generate-type-utility-classes($key);
        }
    }
}
@if ($generate-scheme-placeholders){
    @include generate-all-scheme-utility-classes;
}
@if ($generate-grid-placeholders){
    @include  generate-grid-classes();
}

