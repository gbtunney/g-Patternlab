@import "modularscale-sass/stylesheets/_modularscale.scss";
@import 'sassdash/scss/sassdash';

@import 'functions';
@import "mixins";


//SAMPLESSSS
$test2:
    (
        render:(
            module:size, //dont know??
            prefix: typograhy, //if it is to be generated, use a class prefix before,
            filter: include,
            props: (
                font-family,
                letter-spacing,
                word-spacing,
                text-transform,
                text-decoration,
                font-style,
                font-weight
            ),
        ),
        variants:(
            transform: false,
            options: (
                size-scale: type,
                text-transform: none,
                text-decoration: none,
                letter-spacing: 10000px,
                word-spacing: -1px,
                font-weight: normal,
                font-style: normal
            ),
            units: (
                default:(
                    font-family: monospace
                ),
                font-san-serif: (
                    font-family: "cronos-pro-display",
                    letter-spacing:0px,
                    title: 'Primary: Mr Eaves Sans'
                ),
                font-serif:(
                    font-family: "adobe-garamond-pro",
                    title: 'Secondary, Headers : Mrs Eaves'
                ),
                font-serif-italic: (
                    font-family: "adobe-garamond-pro",
                    title: 'italic serif',
                    font-style: italic
                ),
                font-serif-bold:(
                    font-family: "adobe-garamond-pro",
                    title: "'bold serif'",
                    font-weight: 700
                ),
                font-small-caps:(
                    font-family: "adobe-garamond-pro",
                    text-transform: "uppercase",
                    title: 'Accent, Small Caps : Mrs Eaves Roman Small Caps'
                ),
                font-test:(
                    font-family: "adobe-garamond-pro",
                    text-transform: "testing",
                    title: "testing"
                )
            ),
        ),
        key: unused,
        variant-key: font-small-caps,
    )
;

$test1:
    (
        render:(
            module:size, //dont know??
            prefix: newtype, //if it is to be generated, use a class prefix before,
            filter: assign,
            props: (font-size),
        ),
        variants:(
            transform: ms,
            options: (
                base:36px,
                ratio:1.4
            ), ///option is the thread is for modular scale
            units: (
                xxs: -2,
                xs: -1,
                sm: 2,
                md: 1,
                lg: 2,
                xl: 3,
                xxl: 4,
                xxxl: 5
            )
        ),
        key: unused
    ) ;


$test3:
    (
        render:(
            module:size, //dont know??
            prefix: static-font-size, //if it is to be generated, use a class prefix before,
            filter: assign,
            props: (font-size),
        ),
        variants:(
            transform: false,
            options: (

            ), ///option is the thread is for modular scale
            units: (
                sm: 20px,
                md:  lighten red 5%,
                lg: 30px,
            )
        ),
        key: unused
    ) ;



/// ways to check the render map

@function is-render-map($map){
    @return ( (_has($map, variants)) and (_has($map, render)) );
}
@function is-render-collection($collection){
    @return ( _is-iterable($collection) and _is-list-like($collection));
}
@function is-render-key($collection){
    @return ( ( _is-iterable($collection) is false ) and _is-string($collection));
}

$default-render-obj:
    (
        render:(
            module:false, //dont know??
            prefix: random, //if it is to be generated, use a class prefix before,
            filter: false,
            props: false
        ),
        variants:(
            transform: false,
            options: (), ///option is the thread is for modular scale
            units: ()
        ),
        variant-key: false,
        key:false
    ) ;

///should extend the default?
@mixin render-queue($collection: false){

    @if  get-render-type($collection) == map {
        @include output-css-declarations($collection...);
    }

    @if ( get-render-type($collection) == collection){
        @warn "collection:";
        @each $render-map in $collection{

                @if get-render-type($render-map) == map{
                    @include output-css-declarations($render-map...);

                }@else{
                    @error "RENDER OBJECT ERROR!!!! #{$render-map}";
                }
        }
    }

}

@function get-render-type($collection){
    @if (_($collection,is-render-key) ) {
        @error "ITS A RENDER KEY!!";
        @return key;
    }
    @if (_($collection, is-render-map)){
       // @warn "THIS IS A RENDER MAP!!!";
        @return map;
    }
    @if( _($collection, is-render-collection)){
       // @warn "IS COLLECTION";
        @return collection;
    }

    @error "BROKEN ENTRY";
    @return false;
}


   @include render-queue($test1);

@debug "!!!!!!!!!error";

