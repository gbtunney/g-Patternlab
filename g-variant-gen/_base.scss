@import "modularscale-sass/stylesheets/_modularscale.scss";
@import 'sassdash/scss/sassdash';

@import 'functions';


//SAMPLESSSS
$sample-font-render-map:
    (
        render:(
            module:size, //dont know??
            prefix: newtype, //if it is to be generated, use a class prefix before,
            filter: include,
            props: (
                font-family,
                letter-spacing,
                word-spacing,
                text-transform,
                text-decoration,
                font-style,
                font-weight
            ),
        ),
        variants:(
            transform: false,
            options: (
                size-scale: type,
                text-transform: none,
                text-decoration: none,
                letter-spacing: 10000px,
                word-spacing: -1px,
                font-weight: normal,
                font-style: normal
            ),
            units: (
                default:(
                    font-family: monospace
                ),
                font-san-serif: (
                    font-family: "cronos-pro-display",
                    letter-spacing:0px,
                    title: 'Primary: Mr Eaves Sans'
                ),
                font-serif:(
                    font-family: "adobe-garamond-pro",
                    title: 'Secondary, Headers : Mrs Eaves'
                ),
                font-serif-italic: (
                    font-family: "adobe-garamond-pro",
                    title: 'italic serif',
                    font-style: italic
                ),
                font-serif-bold:(
                    font-family: "adobe-garamond-pro",
                    title: "'bold serif'",
                    font-weight: 700
                ),
                font-small-caps:(
                    font-family: "adobe-garamond-pro",
                    text-transform: "uppercase",
                    title: 'Accent, Small Caps : Mrs Eaves Roman Small Caps'
                ),
                font-test:(
                    font-family: "adobe-garamond-pro",
                    text-transform: "testing",
                    title: "testing"
                )
            ),
        ),
        key: unused
    )
;



$calculated-data-map: new-transform-data(map-get($sample-font-render-map,variants)...);

$rendered-map: get-rendered-data($calculated-data-map,map-get($sample-font-render-map,render)...);

//@debug $rendered-map;

$map: ( 'user': 'fred', 'age': 40 );
$foo: _pick($map, 'user');
@debug $foo;
// => ( 'user': 'fred' )
$foo: _pick($map, _is-string);
// => ( 'user': 'fred' )
@debug $foo;


$var : map-deep-get($sample-font-render-map,variants , units );
//@debug $var;

//@debug _omit($var, font-serif-bold font-serif-italic );

$sample-font-size-render-map:
    (
        render:(
            module:size, //dont know??
            prefix: newtype, //if it is to be generated, use a class prefix before,
            filter: assign,
            props: (font-size),
        ),
        variants:(
            transform: ms,
            options: (
                base:36px,
                ratio:1.4
            ), ///option is the thread is for modular scale
            units: (
                xxs: -2,
                xs: -1,
                sm: 2,
                md: 1,
                lg: 2,
                xl: 3,
                xxl: 4,
                xxxl: 5
            )
        ),
        key: unused
    ) ;

$sample-font-size-render-map-test:
    (
        render:(
            module:size, //dont know??
            prefix: newtype, //if it is to be generated, use a class prefix before,
            filter: assign,
            props: (font-size),
        ),
        variants:(
            transform: ms,
            options: (
                base:36px,
                ratio:1.4
            ), ///option is the thread is for modular scale
            units:20px,

        ),
        key: unused
    ) ;

$sample-font-size-render-map-2:
    (
        render:(
            module:size, //dont know??
            prefix: newtype, //if it is to be generated, use a class prefix before,
            filter: assign,
            props: (font-size),
        ),
        variants:(
            transform: false,
            options: (

            ), ///option is the thread is for modular scale
            units: (
                sm: 20px,
                md:  times-three 20px,
                lg: 30px 30px,
            )
        ),
        key: unused
    ) ;


$default-render-obj:
    (
        render:(
            module:false, //dont know??
            prefix: random, //if it is to be generated, use a class prefix before,
            filter: false,
            props: false
        ),
        variants:(
            transform: false,
            options: (), ///option is the thread is for modular scale
            units: ()
        ),
        variant-key: false,
        key:false
    ) ;

///should extend the default?

@function default-render(){
    @return map-get($default-render-map,render);
}









//$calculated-data-map: new-transform-data(map-get($sample-font-size-render-map,variants)...);

//$rendered-map: get-rendered-data($calculated-data-map,map-get($sample-font-size-render-map,render)...);
//@debug $rendered-map;



@function times-three($n, $args...) {
    @return $n * 3;
}


@mixin generate-object($render:call(get-function(default-render)),$variants:map-get($default-render-obj,variants),$variant-key:map-get($default-render-obj,variant-key) ,$key:map-get($default-render-obj,key) ){

 @if ($variant-key != false){  @error "DO SINGLE ITEM LATER"};

    $transformed-data-map: new-transform-data($variants...);
    $render-data-map: get-rendered-data($transformed-data-map,$render...);

    $prefix : map-get($render,prefix);

    @each $key,$value in $render-data-map{

        #{$prefix}-#{$key}{
@include write-css-property($value);

        }
    }
}

@mixin write-css-property($props:() ) {
    @each $key, $value in $props {
        #{$key}: #{$value};

    }
}
//@include generate-object($sample-font-size-render-map...);

@include generate-object($sample-font-render-map...);
@include generate-object($sample-font-size-render-map-2...);
@debug new-transform-data(map-get($sample-font-size-render-map-2,variants)...)
//@include generate-object($sample-font-size-render-map-test...);

