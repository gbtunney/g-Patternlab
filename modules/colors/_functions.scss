@function get-fallback-property($key) {
    @return map-get($fallback-lookup-map, $key);
}

@function get-lookup-property($key) {
    @return map-get($property-lookup-map, $key);
}

@function is-color($color) {
    @if (type-of($color) == color) {
        @return true;
    } @else {
        @return false;
    }
}

@function get-current-scheme-color-by-string($color-key, $value, $color-scheme:$chroma-active-scheme ) {

    //check to see if string is the name of a color scheme OR a key to color in the current one...

    //
    @if (type-of($value) == string) {

        @if (chroma-has-scheme($value)) {

            //value is the name of a color scheme
            @return color($value, $color-key);

        } @else if (chroma-has-color($value, $color-scheme)) {

            @return color($color-scheme, $value);

        } @else {
            @debug "ALERT! key: #{$color-key} value: #{$value} is not a valid colorscheme or a another color present in current scheme";
        }

    } @else {
        @return false;
    }

}
@function get-color-value($color){
    //converts to a hex if it is a reference to chromas colors
    @if (type-of($color) == color) {
        @return $color;
    } @else if ( type-of($color) == string) {
        @return get-chroma-hex-by-reference($color);
    }@else {
        @return false;
    }
}
@function get-current-scheme-color($color-key, $value, $color-scheme:$chroma-active-scheme ) {
    ///route through here based on variable datatypes

    @if ($value == true) {

        ///see if scheme has color value for key
        @if (chroma-has-color($color-key, $color-scheme)) {
            @return color($color-scheme, $color-key);
        } @else {
            $fallback-key: get-fallback-property($color-key);

            // @debug "****** ALERT!  key: #{$color-key} not valid in scheme: #{$color-scheme} , trying fallback key: #{$fallback-key}";

            @if (chroma-has-color($fallback-key, $color-scheme)) {

                // @debug "----fallback for key #{$color-key} to #{$fallback-key} in scheme #{$color-scheme} was successful";
                @return color($color-scheme, $fallback-key);

            } @else {
                @return false;
            }
        }

    } @else if (type-of($value) == string) {

        @if (chroma-has-color($value, $color-scheme)) {
            @return get-current-scheme-color-by-string($color-key, $value, $color-scheme);
        } @else {
            // @debug "ALERT!  value: #{$value} is not a valid color present in scheme: #{$color-scheme}";
            @return false;
        }

    } @else if (type-of($value) == color) {
        @return $value;
    } @else {
        @return false;
    }
}

//takes of quotes and makes sure it is a string
@function clean-string($str) {
    $cleanStr: to-string($str);
    $cleanStr: str-replace($cleanStr, "_", "-");
    $cleanStr: str-replace($cleanStr, " ", "-");
    $cleanStr: to-lower_case($cleanStr);
    @return $cleanStr;
}

//returns a map of all possible scheme color keys
@function get-scheme-reference-list($_schemes) {
    $ref-map: ();
    @each $key, $scheme in $_schemes {
        @if (map-get($scheme,colors) and type-of(map-get($scheme,colors))==map) {
            $ref-map: map_merge($ref-map, map-get($scheme, colors));
        }
    }
    @return $ref-map;
}

//returns a map of all color keys and colors for $scheme-key   ie light
@function get-scheme-colors-list($scheme-key, $_schemes: $schemes) {
    $ref-list: get-scheme-reference-list($_schemes); //possible values
    $found: ();
    @each $key, $value in $ref-list {
        @if (chroma-has-color($key, $scheme-key)) {
            $found: map-set($found, $key, color($scheme-key, $key));
        }
    }
    @return $found;
}

@function is-valid-color-reference($-ref ) {
    //it must have color to have a valid reference
    @if (color($-ref)) {
        $result: color($-ref);
        @debug "#{$-ref} is a color of type #{type-of($result)}";
        @return true;
    }
    @return false;
}

@function get-transformed-colormap( $source-map:(),$transform-map:()) {
    $-newmap: ();

    @each $key, $value in $transform-map {
        ////TRANSFORMATION
        ///check to see if source map has both key and value in its keys
        @if (map-get($source-map,$value) and map-get($source-map,$key)) {

            $-newmap: map-set($-newmap, $key, map-get($source-map, $value));
        }
    }
    @return $-newmap;
}

@function clean-palatte-strings($-base-colors ) {
    $clean-color-map: ();
    $clean-value: value;
    @each $key, $value in $-base-colors {

        @if (type-of($value) == string) {
            $clean-value: clean-string($value);
        } @else if (type-of($value) == color) {
            $clean-value: $value;
        } @else {
            @error "unexpected color key: #{$key}  value:#{$value}";
        }
        @if ($clean-value) {
            $clean-color-map: map-set($clean-color-map, clean-string($key), $clean-value);
        }
    }
    @return $clean-color-map;
}
@function get-schemes-with-transforms($_schemes:$schemes) {
    $schemes-with-transforms: ();
    @each $key, $scheme in $_schemes {
        @if (map-get($scheme, transform)) {
            //  @debug "FOUND!";
            $schemes-with-transforms: map-set($schemes-with-transforms, $key, $scheme);
        }
    }
    @return $schemes-with-transforms;
}

@function get-module-color(){
    @return true;
}

@function get-dependancies-color(){
    @return (
            (color): true,
            (get-current-scheme-color):true,
            (inverted): true,
            (to-string):true
    );
}
@function inverted(){
    @return $inverted-key-lookup-map;
}