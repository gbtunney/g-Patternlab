@function get-fallback-property($key) {
    @return map-get($fallback-lookup-map, $key);
}

@function get-lookup-property($key) {
    @return map-get($property-lookup-map, $key);
}

@function get-inverted-scheme-key($key) {
    @return map-get($inverted-key-lookup-map, $key);
}

@function get-inverted-colormap( $base-scheme: $chroma-active-scheme ) {

    $new-colors: (
        foreground: color($base-scheme, get-inverted-scheme-key(foreground)),
        background: color($base-scheme, get-inverted-scheme-key(background)),
        accent: color($base-scheme, get-inverted-scheme-key(accent)),
        border: color($base-scheme, get-inverted-scheme-key(background))
    );
    @return $new-colors;

}

@function add-all-color-keys($my-color-key-map,$colors, $scheme-name) {
    @if (type-of($colors ) == map) {
        @return map-merge($my-color-key-map, $colors);
    }
    @return false;
}

@function add-color-key($color-key) {
    @if map-has-key($color-key-map, $color-key) {
       // @return true;
    } @else {

     //   @return map-set(, $color-key, $color-key);

    }

}
//helper function for chroma
@function get-scheme-data($key :$chroma-active-scheme ){
    @return map-get($schemes,$key);
}
@function  get-scheme-colors($scheme-key: $chroma-active-scheme){
    //helps with inverted colors???
    @if ((chroma-has-scheme($scheme-key)) and get-scheme-data($scheme-key)){
        $scheme: get-scheme-data($scheme-key);
        @return  map-get($scheme,colors);
    }
    //@return;
}
@function update-color-in-scheme($scheme-key: $chroma-active-scheme, $color-key:foreground, $value:red ){
    ///extending - adding to
    @if (chroma-has-scheme($scheme-key)){
        @if ( chroma-has-color($color-key, $scheme-key) ) {
            @debug "scheme #{$scheme-key} already has color #{$color-key}, updating";

        }@else {

        }
        $scheme-colors : get-scheme-colors($scheme-key);
        $color-to-add:($color-key:$value);
        $scheme-colors:  map-merge($scheme-colors,$color-to-add);
        $chroma: add-colors($scheme-key,$scheme-colors);
        @return true;

    }@else{
        @debug "scheme #{$scheme-key} doesnt excist, cant add color #{$color-key}";
    }
}

@function add-scheme($scheme-key: $chroma-active-scheme, $color-key:foreground, $value:red ){
    ///extending - adding to
    @if (chroma-has-scheme($scheme-key)){
        @if ( chroma-has-color($color-key, $scheme-key) ) {
            @debug "scheme #{$scheme-key} already has color #{$color-key}, updating";

        }@else {

        }
        $scheme-colors : get-scheme-colors($scheme-key);
        $color-to-add:($color-key:$value);
        $scheme-colors:  map-merge($scheme-colors,$color-to-add);
        $chroma: add-colors($scheme-key,$scheme-colors);
        @return true;

    }@else{
        @debug "scheme #{$scheme-key} doesnt excist, cant add color #{$color-key}";
    }
}

@function get-current-scheme-color-by-string($color-key, $value, $color-scheme:$chroma-active-scheme ) {

    //check to see if string is the name of a color scheme OR a key to color in the current one...

    //
    @if (type-of($value) == string) {

        @if (chroma-has-scheme($value)) {

            //value is the name of a color scheme
            @return color($value, $color-key);

        } @else if (chroma-has-color($value, $color-scheme)) {

            @return color($color-scheme, $value);

        } @else {
            @debug "ALERT! key: #{$color-key} value: #{$value} is not a valid colorscheme or a another color present in current scheme";
        }

    } @else {
        @return false;
    }

}

@function get-current-scheme-color($color-key, $value, $color-scheme:$chroma-active-scheme ) {
    ///route through here based on variable datatypes

    @if ($value == true) {

        ///see if scheme has color value for key
        @if (chroma-has-color($color-key, $color-scheme)) {
            @return color($color-scheme, $color-key);
        } @else {
            $fallback-key: get-fallback-property($color-key);

            // @debug "****** ALERT!  key: #{$color-key} not valid in scheme: #{$color-scheme} , trying fallback key: #{$fallback-key}";

            @if (chroma-has-color($fallback-key, $color-scheme)) {

                // @debug "----fallback for key #{$color-key} to #{$fallback-key} in scheme #{$color-scheme} was successful";
                @return color($color-scheme, $fallback-key);

            } @else {
                @return false;
            }
        }

    } @else if (type-of($value) == string) {

        @if (chroma-has-color($value, $color-scheme)) {
            @return get-current-scheme-color-by-string($color-key, $value, $color-scheme);
        } @else {
            // @debug "ALERT!  value: #{$value} is not a valid color present in scheme: #{$color-scheme}";
            @return false;
        }

    } @else if (type-of($value) == color) {
        @return $value;
    } @else {
        @return false;
    }
}

@function get-module-color(){
    @return true;
}