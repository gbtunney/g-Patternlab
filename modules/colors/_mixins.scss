%border-defaults {
    border-style: solid;
    border-width: 1px;
}

@mixin init-color-module(){
    @include init-cm($baseColors,$schemes);
}

/*
exAMPLE usage:

@include pl-colorscheme(dark-accent-secondary,(
    background: true,
    foreground: true,
    accent:true,
    border: true,
    fill:true
) )*/

@mixin g-color-scheme( $scheme-variant-key, $props:() ){
    $schemeItem: extend-collection-item(color-schemes, variants options obj,$props );
    @include output-css-declarations($schemeItem..., $variant-key:$scheme-variant-key);
    @content;
}

@mixin init-cm($_baseColors,$_schemes,$additional-schemes:false,$allow-unregistered:false) {

    $chroma: define-default-color-scheme('Branding color names for use by "functional" color names below.');
    // Add colors to the default color scheme.
    $chroma: add-colors((clean-palatte-strings($_baseColors))); //variable from config file.
    @each $key, $scheme in $_schemes {
        @if (type-of($scheme)== map) {
        } @else {
            @debug "not found#{$scheme}";
        }

        @if (map-get($scheme, parent)) {
            $chroma: define-color-scheme($key, map-get($scheme, description), map-get($scheme, parent));
        } @else {
            //scheme with no parent
            $chroma: define-color-scheme($key, map-get($scheme, description));
            @if (map-has_key($scheme, colors)) {
                $chroma: add-colors(map-get($scheme, key), clean-palatte-strings(map-get($scheme, colors)));
            }
        }
        @if (map-has_key($scheme, colors)) {
            $chroma: add-colors(map-get($scheme, key), clean-palatte-strings(map-get($scheme, colors)));
        }
    }
    @include do-transforms(get-schemes-with-transforms());
}

@mixin do-transforms($_schemes) {
    @each $key, $scheme in $_schemes {

        $transform-map: map-get($scheme, transform);

        @if (type-of(map-get($scheme, transform)) == string  and function-exists(map-get($scheme, transform))) {
            $transform-map: call(get-function(map-get($scheme, transform)));
        }
        @if (map-get($scheme, parent)) {

            @if (not map-get($scheme, colors)) {
                $scheme: map-set($scheme, colors, ());
            }
            $transformed-colormap: get-transformed-colormap(get-scheme-colors-list($key), $transform-map);
            $chroma: add-colors($key, $transformed-colormap);
        }
    }
}  ;