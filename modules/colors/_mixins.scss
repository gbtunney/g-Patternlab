

%border-defaults {
    border-style: solid;
    border-width: 1px;
}

@mixin add-scheme($scheme-key,$parent:$chroma-active-scheme,$colors:(), $invert:false,$description:$scheme-key ){

    //get-scheme-colormap
    $extend-scheme: false;

    @if  ($parent == false) {
        $chroma: define-color-scheme($scheme-key);
    }@else{
        $chroma: define-color-scheme($scheme-key,$parent,$description);

        //todo: add invert function .
       /* @if (($colors == false) and ($invert)) {
            // @debug "it is inverted#{map-get($scheme, key)}";
            $scheme: map-merge($scheme, (colors: get-inverted-colormap(map-get($scheme, key))));
        }*/
    }

}
@mixin write-scheme-property($property: foreground, $value: false,  $selector: false, $colorfunc: false, $colorfuncArgs:false, $selector-at-root: false  ) {

    $property-to-write: get-lookup-property($property);

    $value-to-write: $value;

    @if ($value-to-write and type-of($colorfunc)== string  and function-exists($colorfunc) and $colorfuncArgs != false) {
        $value-to-write: call(get-function($colorfunc), $value-to-write, $colorfuncArgs);
    }

    @if ($selector-at-root and $selector  and $value-to-write and $property-to-write) {
        @at-root {
            #{$selector} {
                #{$property-to-write} : #{$value-to-write};
                @content;
            }
        }

    } @else if ($selector  and $value-to-write and $property-to-write) {
        #{$selector} {
            #{$property-to-write} : #{$value-to-write};
            @content;
        }
    } @else if ($value-to-write and $property-to-write) {
        #{$property-to-write} : #{$value-to-write};
        @content;
    }
}
@mixin g-color-scheme($color-scheme:$chroma-active-scheme, $background:true, $foreground:true,$accent:false, $border:false,$hover-background:false,$hover-foreground:false,$hover-fill:false, $fill:false, $stroke:false,$accent-selector:$default-accent-selector, $border-size: 1px ) {

    @include write-scheme-property(background, get-current-scheme-color(background, $background, $color-scheme));

    @include write-scheme-property(foreground, get-current-scheme-color(foreground, $foreground, $color-scheme));

    @include write-scheme-property(accent, get-current-scheme-color(accent, $accent, $color-scheme), $accent-selector);

    @include write-scheme-property(border, get-current-scheme-color(border, $border, $color-scheme)) {
        @extend %border-defaults;
    }
    @include write-scheme-property(fill, get-current-scheme-color(fill, $fill, $color-scheme), $default-svg-selector);

    ///******HOVER FUNCTIONS>
    @include write-scheme-property(hover-background, get-current-scheme-color(hover-background, $hover-background, $color-scheme), '#{&}:hover', false, false, true);

    @include write-scheme-property(hover-foreground, get-current-scheme-color(hover-foreground, $hover-foreground, $color-scheme), '#{&}:hover', false, false, true);

    @include write-scheme-property(hover-fill, get-current-scheme-color(hover-fill, $hover-fill, $color-scheme), '#{&}:hover #{$default-svg-selector}', false, false, true);

}