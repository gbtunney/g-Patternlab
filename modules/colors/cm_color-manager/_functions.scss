// define-color-scheme($scheme [, $description] [, $parent])
//
// Define a new color scheme and, optionally, set its description and parent
// color scheme.
//
// When searching for a color and the color scheme does not define that
// particular color, the parent color scheme will be checked to see if it
// defines that color.
//
// By default, all color schemes inherit their colors from the default color
// scheme. Optionally, a color scheme can choose to inherit from a different
// color scheme by specifying the `$parent` parameter.
//
// Usage:
// ```scss
// $chroma: define-color-scheme(taiwan, "Taiwan's colors");
// $chroma: define-color-scheme(taipei, "Taipei's colors", $parent: taiwan);
// ```
//
// $scheme      - The name of the new color scheme.
// $description - Optional description of the color scheme.
// $parent      - The parent color scheme to inherit colors from; defaults to
//                `default` (i.e. `$CHROMA_DEFAULT_SCHEME`).
//
// Style guide: functions.define-color-scheme
@function define-color-scheme($scheme, $description: '', $parent: $CM_DEFAULT_SCHEME) {
   // Check if we are defining the default color scheme.
    @if $scheme == $CM_DEFAULT_SCHEME {
        $parent: false;
    }

        // Check parent reference exists.
        @if $parent and not chroma-has-scheme($parent) {
            @error 'Cannot set the parent of #{scheme} to "#{$parent}" because the scheme "#{$parent}" was not found.';
        }

        $schemes: map-merge(
                map-get($CM, 'schemes'),
                ($scheme: (
                    'description': $description,
                    'parent': $parent,
                ))
        );

        $CM: map-merge(
                $CM,
                ('schemes': $schemes)
        ) !global;
@debug $CM;
        @return $CM;
}

// define-default-color-scheme([$name,] $description)
//
// Sets the description of the default color scheme.
//
// Usage:
// ```scss
// $chroma: define-default-color-scheme('Default colors');
// // or:
// $chroma: define-default-color-scheme('branding', 'Basic branding colors');
// ```
//
// $name - Optional: default color scheme name; defaults to `default`.
// $description - Description of the default color scheme.
//
// Style guide: functions.define-default-color-scheme
@function define-default-color-scheme($name, $description: null) {


    // @if type-of($description) == 'null' {
        // The shortcut syntax was used since $description is null. Move the actual
        // description to the $description parameter.
        //$description: $name;

        @return define-color-scheme($CM_DEFAULT_SCHEME, $description);
   // }


    // Remove the old default.
    @if (map-get($CM, 'schemes')){
        $schemes: map-remove(map-get($CM, 'schemes'), $CM_DEFAULT_SCHEME);
        // Update all child schemes of the default.
        @each $scheme-name, $map in $schemes {
            @if map-get($map, 'parent') == $CM_DEFAULT_SCHEME {
                $schemes: map-merge(
                        $schemes,
                        ($scheme-name: (
                            'description': map-get($map, 'description'),
                            'parent': $name,
                        ))
                );
            }
        }
    }

    // Set the new default scheme name and, if needed, the new active scheme.
    @if $CM-active-scheme == $CM_DEFAULT_SCHEME {
        $CM-active-scheme: $name !global;
    }
    $CM_DEFAULT_SCHEME: $name !global;
    // Add the default scheme (and the updated schemes) back into $chroma.
    $CM: map-merge(
            $CM,
            ('schemes': map-merge(
                    $schemes,
                    ($name: (
                        'description': $description,
                        'parent': false,
                    ))
            ))
    ) !global;

    @return $CM;
}

// add-colors([$scheme,] $colors)
//
// Add the colors to an existing color scheme.
//
// Usage:
// ```scss
// $CM: add-colors('admiral', (
//  link:        #0000cc,
//  nav:         link, // Sets this color to the same value as the "link" color.
//  nav-visited: (nav darken 20%), // Takes the "nav" color and passes it
//                                 // through darken([color], 20%)
//  nav-focus:   (nav lighten 10%),
// ));
// ```
//
// If you wish to add colors to the active scheme, you can just use:
// ```scss
// $CM: add-colors((
//  link:        #0000cc,
//  nav:         link,
//  nav-visited: (link darken 20%),
//  nav-focus:   (link lighten 10%),
// ));
// ```
//
// $scheme - Optional: color scheme to add colors to; defaults to
//           `$CM-active-scheme`.
// $colors - A Sass map containing the new colors.
//
// Style guide: functions.add-colors
@function add-colors($scheme, $colors: null) {
    @if type-of($scheme) == 'map' or type-of($scheme) == 'list' {
        // The shortcut syntax was used since only a map of $colors was given as the
        // first parameter. Move the map to the $colors parameter and set a default
        // value to $scheme.
        $colors: $scheme;
        $scheme: $CM-active-scheme;
    }
    @if not chroma-has-scheme($scheme) {
        @error 'The #{$_chroma-spelling} scheme "#{$scheme}" was not found.';
    }
    @each $color-name, $color-value in $colors {
        // Cast the color name to a string to ensure color keywords do not cause
        // problems as map keys.
        $color-name: clean-string($color-name);
        $color-function: false;
        $color-parameters: ();
        // If the "value" is a list, its a value plus a function.
        @if type-of($color-value) == 'list' {
            $color-function: nth($color-value, 2);
            @if not function_exists($color-function) {
                @error 'The function "#{$color-function}" was not found when adding the #{$_chroma-spelling} "#{$color-name}".';
            }
            // Include the color value in the list of function parameters.
            @for $i from 1 through length($color-value) {
                @if $i != 2 {
                    $color-parameters: append($color-parameters, nth($color-value, $i));
                }
            }
            $color-value: nth($color-value, 1);
        }
        // If the value given is a color, just add it.
        @if type-of($color-value) == 'color' and not (_is-old-libsass() and _is-keyword-string($color-value)) {
            @if $color-function {
                $color-value: _safe-call($color-function, $color-parameters...);
            }
            $CM: _chroma-add-name($scheme, $color-name,
            $value          : $color-value,
            $reference      : false,
            $referenced_by  : (),
            $function       : $color-function,
            $parameters     : $color-parameters
            ) !global;
        }
            // If the value given is a reference to another color...
        @else if type-of($color-value) == 'string' or (_is-old-libsass() and _is-keyword-string($color-value)) {
@debug "ADDING#{$color-name} :   #{$color-value}"
            /*            $ref: $color-value;
            // Find the referenced color.
            $scheme-of-reference: chroma-has-color($ref, $scheme);
            @if not $scheme-of-reference {
                @error 'The #{$_chroma-spelling} "#{$ref}" was not found when adding the #{$_chroma-spelling} "#{$color-name}".';
            }
            $referenced-color: map-get(map-get($CM, 'names'), "#{$scheme-of-reference}::#{$ref}");
            // Add the new color.
            $new-value: map-get($referenced-color, 'value');
            @if $color-function {
                $color-parameters: set-nth($color-parameters, 1, $new-value);
                $new-value: _safe-call($color-function, $color-parameters...);
            }
            $CM: _chroma-add-name($scheme, $color-name,
            $value         : $new-value,
            $reference     : $ref,
            $referenced_by : (),
            $function      : $color-function,
            $parameters    : $color-parameters
            ) !global;
            // Document the new color in all the referenced_by lists.
            @while $ref {
                $CM: _chroma-add-name($scheme-of-reference, $ref,
                $value         : map-get($referenced-color, 'value'),
                $reference     : map-get($referenced-color, 'reference'),
                $referenced_by : append(
                        map-get($referenced-color, 'referenced_by'),
                        $color-name
                ),
                $function      : map-get($referenced-color, 'function'),
                $parameters    : map-get($referenced-color, 'parameters')
                ) !global;
                $ref: map-get($referenced-color, 'reference');
                @if $ref {
                    $scheme-of-reference: chroma-has-color($ref, $scheme);
                    $referenced-color: map-get(map-get($CM, 'names'), "#{$scheme-of-reference}::#{$ref}");
                }
            }*/
        }
        @else {
            @error 'Unexpected value, "#{$color-value}", given for #{$_chroma-spelling} "#{$color-name}".';
        }
    }

    @return $CM;
}
