$CM-color-ref-hash: ();
$CM-schemes-hash: ();

@mixin init-cm($_baseColors,$_schemes,$additional-schemes:false,$allow-unregistered:false) {

   // @debug $_baseColors;
    $chroma: define-default-color-scheme('Branding color names for use by "functional" color names below.');
    // Add colors to the default color scheme.
    $chroma: add-colors((clean-palatte-strings($_baseColors))); //variable from config file.
    @each $key, $scheme in $_schemes {
        @if ( type-of($scheme)== map){
        }@else {
            @debug "not found#{$scheme}";
        }
        @if (map-get($scheme, transform)) {
            $transform-map: map-get($scheme, transform);

            @if (type-of(map-get($scheme, transform)) == string  and function-exists(map-get($scheme, transform))){
                $transform-map: call(map-get($scheme, transform));
            }
            $parent-colors: ();
            @if (map-get($scheme, parent)) {

                @if (not map-get($scheme, colors)){
                    $scheme: map-set($scheme, colors, ());
                }
                //merge parent with child schemes
                $child-colors: map-get($scheme, colors);
                $parent-colors: map-get(map-get($_schemes, map-get($scheme, parent)), colors);
                $merged: map-merge($parent-colors, $child-colors);
                $scheme: map-set($scheme, colors, $merged);
            }
            $source-map: map-get($scheme, colors);
            $source-map: map-merge($source-map, get-transformed-colormap($source-map, $transform-map));
            $scheme: map-set($scheme, colors, $source-map);
        }

        @if (map-get($scheme, parent)) {
            $chroma: define-color-scheme($key, map-get($scheme, description), map-get($scheme, parent));
        } @else {
            //scheme with no parent
            $chroma: define-color-scheme($key, map-get($scheme, description));
            @if (map-has_key($scheme, colors)) {
                $chroma: add-colors(map-get($scheme, key), clean-palatte-strings(map-get($scheme, colors)));
            }
        }
        @if (map-has_key($scheme, colors)) {
            $chroma: add-colors(map-get($scheme, key), clean-palatte-strings(map-get($scheme, colors)));
        }
    }
}