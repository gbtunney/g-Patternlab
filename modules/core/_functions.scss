@function get-default( $module-name : size,$_core-module-defaults:$core-module-defaults) {
	// @warn _get($core-module-defaults,$module-name);
	@if _get($core-module-defaults, $module-name) {
		@return _get($core-module-defaults, $module-name);
	} @else {
		@error "DEFAULTS FROM MODULE #{$module-name} NOT FOUND.";
	}
}

@function batch-add-to-style-dictionary($collection, $_style-dictionary: $style-dictionary ) {
	$dictionary: ();
	@each $value in $collection {
		$dictionary: add-to-style-dictionary($value, map-get($value, key));
	}
	@return $_style-dictionary;
}

@function clean-collection($collection,$arg: key , $func: _omit ) {
	$new-collection: ();
	@each $item in $collection {
		$new-collection: _push($new-collection, _omit($item, $arg));
		//@debug "CLEANING!! #{_omit($item ,$arg) }";
	}
	@return $new-collection;
}

@function add-to-style-dictionary($renderObj:(),$key:false,$use-defaults:false, $default-module:size, $_style-dictionary: $style-dictionary ) {
	$new-render-obj: ();

	@if _is-map( $renderObj ) == false {
		@error "not a map";
	}

	@if ($use-defaults) {
		$new-render-obj: _assign(get-default($default-module), $renderObj);
	} @else {
		$new-render-obj: $renderObj;
	}
	@if ($key) {
		$new-render-obj: map-set($new-render-obj, key, $key);
	} @else {
		$key: map-get($new-render-obj, key);
	}
	@if (_get($_style-dictionary, $key)) {
		@warn "ALREADY ADDED #{$key}";
	} @else {
		$style-dictionary: map-set($style-dictionary, $key, $new-render-obj) !global;
	}
	@return false;
}

//TODO: dont know whaat i should name this
@function get-single-render-style-props($key,$prop:false, $args...) {

	@if (_($key, is-render-map)) {
		@return $key;
	}
	@if (_get($style-dictionary, $key) == false) {
		@return false;
	}
	@if ($prop) {
		@return _get($style-dictionary, $key #{$prop});
	}
	@return _get($style-dictionary, $key);
}

@function times-three($n, $args...) {
	@debug $args;
	@return $n * 3;
}

@function get-render-style($key,$_style-dictionary:$style-dictionary) {
	@if (length($key) == 1) {
		//if it is not a list.
		@return (get-single-render-style($key));
	}
	@return _map($key, get-single-render-style);
}

@function ratio-size($v:1, $base: 1 ) {
	@if (_is-list($v)) {
		$new-list: ();
		@each $integer in $v {
			$new-list: _push($new-list, multiply($integer, $base));
		}
		@return $new-list;
	}
	@if (_is-number($v)) {
		$v: ($v * $base);
		@if (has-unit($v) == false) {
			@warn "ratio size value has no unit----#{$v}";
		}
		@return $v;
	} @else {
		@warn "trying to do a ratio-size on non integer: #{$v}";
		@return $v;
	}
	@return false;
}

///move to general utilitisz
@function is-single-item($value) {

	@return (type-of($value) != map and ( length($value) >= 1 ));
}

///remap merges values with option maps

@function remap-value($value:false, $_options:false, $value-key: v /* if value is a single item , map with this key*/
) {
	@if (is-map($value ) == false) {
		$test: _first($value);
		@if (_is-function(_first($value))) {
			$value: call(get-function(_first($value)), _drop($value, 1)...);
		}
		@return _assign((#{$value-key}: $value), $_options);
	} @else {
		@return map-merge($_options, $value);
	}
}

@function no-transformation($v) {
	@return $v;
}

@function get-color-contrast($v, $func ) {

	$newmap: ();

	@if (is-color($v)) {
		$newmap: map-set($newmap, background, $v);
		$newmap: map-set($newmap, foreground, choose-contrast-color($v));
		$newmap: map-set($newmap, border, choose-contrast-color($v));
	}

	@return $newmap;
}

//filter function for single numbers...
@function assign($unit:(),$props:(),$additional-parameters:false) {
	//@warn is-single-item($props) ;

	@if is-single-item($props) and is-single-item($unit) {
		@return map-set((), _to-string($props), $unit); ///if there are additional options, item needs to be put in map instead of returned
	} @else if (_is-map($unit) and is-single-item($props)) {
		// @error "HI";
		@return map-set((), _to-string($props), map-values($unit)); ///if there are additional options, item needs to be put in map instead of returned

	} @else {

	}
	@return false;
}

//TODO: this is kind of wierd probs should be changed
@function get-selector-map($value-to-write:false,  $prop-to-write: false, $selector:false, $at-root:false ) {
	$new-map: ();
	@if ($selector) {

		@if $at-root {
			$new-map: map-merge((), (at-root: ($selector: ($prop-to-write : $value-to-write))));
		} @else {
			$new-map: map-merge((), ($selector: ($prop-to-write : $value-to-write)));
		}
	} @else {
		$new-map: map-merge((), (default: ($prop-to-write : $value-to-write)));
	}
	@return $new-map;
}

@function assign-map($unit:(),$props:(),$additional-parameters:false) { //currently used for colo

	$new-map: ();

	@if is-single-item($props) and is-single-item($unit) {
		@return map-set((), _to-string($props), $unit); ///if there are additional options, item needs to be put in map instead of returned
	} @else if (_is-map($unit) and _is-map($props)) {

		@each $key, $value in $props {
			@if (map-get($unit, $key)) {
				//@debug "UNIT --#{$key}-#{map-get($unit, $key)}";

				//@if ( _is-map($value)){
				$new-map: recursive-map-merge($new-map, get-selector-map(map-get($unit, $key), $value...));

				//}@else{
				//@debug "UNIT --#{$new-map}-#{map-get($unit, $key)}";

				//}
			}
		}
		//@debug $new-map;

		@return $new-map;
	}
	@return false;
}

//filters for props
@function include($units:(),$props:(),$additional-parameters:false) {
	@return _pick($units, $props);
}

@function exclude($units:(),$props:(),$additional-parameters:false) {
	@return _omit($units, $props);
}

@function color-test($v:false ,$obj:() ) {
	$new-map: ();
	@each $key, $value in $obj {

		$val: get-current-scheme-color($key, $value, $v);
		@if ($val) {
			//@debug "COLOR FOUND #{$key} #{$val} #{$v}";
			$new-map: map-merge($new-map, ($key: $val));
		}

		@if ($value == true) {

			//@if (color($v, $key) ){
			//$new-map: map-merge($new-map, ($key: color($v, $key)));
			//	}@else{
			//@warn "color #{$key} not found";
			//}
		}
	}
	@return $new-map;
}

@function transform-data($units : () , $options:false,$transform:false,$var:v /* transformed ones variable name if it neds one*/
) {
	$map-to-return: ();
	$_transform-result: false;
	@if (type-of($units) == list) {
		$units: to-map($units, true);
	}
	@if (type-of($units) == map) {
		@each $key, $value in $units {
			$new-key: false;
			$new-value: false;
			///if its a key (sm ) and not a value...

			@if (map-get($units, $key)) {
				$new-key: $key;
				$new-value: map-get($units, $key);
			} @else {

				$new-key: index($units, $key); //have to flip flop these.
				$new-value: nth($units, $new-key);
			}
			$new-value: remap-value($new-value, $options, $var);
			/// @warn "TRYING TO TRANSFORM key: #{_is-function($transform)} value: #{$new-value}";

			@if (_is-function($transform)) {
				$_transform-result: call(get-function($transform), $new-value...);
				// $_transform-result:  _map($new-value, $transform);
				//this seems wrong?? $_transform-result:  _map($new-value, $transform);
			} @else {
				$_transform-result: map-merge($options, $new-value);
			}
			$map-to-return: map-set($map-to-return, $new-key, $_transform-result);
		}
	} @else {
		@error "BAD DATA OBJECT #{$units}";
	}
	@return $map-to-return;
}

//take calculated and filter map
@function get-rendered-data($units:(), $props:() , $filter: false, $suffix:false,$module:false) {

	$filtered-unit-arr: $units;

	@if ($filter==false) {
		@return $units;
	}
	@if (_is-function($filter)) {

		//TODO USE SASSDASH
		@each $key, $value in $units {

			//add key with empty array
			$filtered-unit-arr: map-set($filtered-unit-arr, $key, ());

			//filter map with props
			$transformed-val: call(get-function($filter), $value, $props);
			//replace with new
			$filtered-unit-arr: map-set($filtered-unit-arr, $key, $transformed-val);
		}
	} @else {
		@debug "NOT A FUNCTION";
	}
	@return $filtered-unit-arr;
}

@function key-pairs-to-map($value, $prop-name) {
	@return ($prop-name: $value);
}

@function render-map-merge($base-obj, $obj:()) {
	@if (_is-map($base-obj) and _is-map($obj)) {

		@if (map-depth($obj) > 1) {
			@return recursive-map-merge($base-obj, $obj);
			@error "RECURSIVE MERGE: #{map-depth($obj)} ";
		} @else {
			@return map-merge($base-obj, $obj);
		}
	} @else {
		@return false;
	}
}

@function get-full-render-map($obj) {
	//this checks if thr map has a PARENT key, and if so..merges it.
	@if (is-render-map($obj)) {
		@if (_get($obj, parent) and  dictionary-item(_get($obj, parent) )) {
			@return render-map-merge(dictionary-item(_get($obj, parent)), $obj);
		}
		@return $obj;
	} @else {
		@error "there is an error w your map";
		@return false;
	}
}

@function dictionary-item($key, $args...) {
	@if (_($key, is-render-map)) {
		@return $key;
	}
	@if (_get($style-dictionary, $key) == false) {
		@error "Dictionary item not found #{$key}";
		@return false;
	}
	@return _get($style-dictionary, $key);
}

@function needs-overwrite( $overwrite-collection:false, $prop: variant-key, $override-all: true ) {
	@return if($overwrite-collection, true, false);
}

@function routerFunc( $obj , $condition, $callback:false, $break:false,$overwrite-collection:false, $prop: variant-key, $override-all: true ) {
	@if (_($obj, $condition)) {
		//	@debug "condition #{$condition}is succesful";
		@if ($callback == false) {
			@return $obj;
		}
		@return _($obj, $callback);
	} @else {
		//	@debug "condition #{$condition} NOT  succesful";
		//if condition fails, return the object untransformed by callback.
		@if ($break) {
			@return false;
		} @else {
			@return $obj;
		}
	}
	@return false;
}

@function get-collection-item($obj:() ) {
	///these are "chained kinda"
	$new-item: false;
	$new-item: routerFunc($obj, _is-string, dictionary-item);
	$new-item: routerFunc($new-item, _is-map, get-full-render-map);
	@return $new-item;
}

@function get-collection( $obj : (),$overwrite-collection:false, $prop: variant-key) {

	$my-collection: ();
	$item: get-collection-item($obj);
	//TODO MIGHT NEED TO REVIEW THIS?
	$my-collection: if(($item != false and _is-map($item)), _push($my-collection, $item), $my-collection);

	@if (_is-list($item)) {
		$collection: $obj;
		@each $_obj in $collection {
			$item: get-collection-item($_obj);
			$my-collection: if(($item != false), _push($my-collection, $item), $my-collection);
		}
	}
	@return if(($overwrite-collection != false), overwrite-collections($my-collection, $overwrite-collection, $prop), $my-collection);
}

@function overwrite-collections($collection,$overwrite-collection:false, $prop: variant-key ) {

	@if $overwrite-collection == false {
		@return $collection;
	}
	//*****OVERRITE ALL!
	@if ($overwrite-collection and  ( length($overwrite-collection)==1 or _is-map($overwrite-collection) )) {
		@debug '---------overwrite all mode';
		$new-collection: ();

		@each $item in $collection {
			@if (_is-map($overwrite-collection)) {
				$new-collection: _push($new-collection, render-map-merge($item, $overwrite-collection));
			} @else {
				$new-collection: _push($new-collection, render-map-merge($item, key-pairs-to-map($overwrite-collection, $prop)));
			}
		}
		@return $new-collection;

	} @else if (length($overwrite-collection) >= length($collection)) {
		$new-collection: ();
		$count: 0;

		//'coalate collections'
		@each $item in $overwrite-collection {
			$count: $count + 1;
			$source-map: nth($collection, $count);

			@if ($item == false) {
				$new-collection: _push($new-collection, $source-map);
			} @else if (_is-map($item)) {
				$new-collection: _push($new-collection, render-map-merge($source-map, $item));
			} @else {
				$new-collection: _push($new-collection, render-map-merge($source-map, key-pairs-to-map($item, $prop)));
			}
		}
		@return $new-collection;
	}
	@return false;
}

@function format-selector($selector, $suffix:false, $suffix-key: false, $_class-seperator:$class-seperator) {
	@if ($selector) {
		$_new-selector: $selector;
		@if ($suffix) {

			$_new-selector: #{$_new-selector}#{$_class-seperator}#{$suffix-key}; //_concat($_new-selector, $suffix);
		}
		@return $_new-selector;
	} @else if ($selector== false and $suffix!=false and _is-function($suffix)) {

		//TODO: look into this bem sass
		//$_new-selector:call(get-function(_modifier), $suffix-key);
		//@debug "!!TYPE IS #{&} #{$suffix} #{$suffix-key} #{_is-function($suffix)}";
		//@return $_new-selector;
		@return #{&}#{$_class-seperator}#{$suffix-key};
	} @else if ($selector== false and $suffix==true) {

		@return #{&}#{$_class-seperator}#{$suffix-key};
	}
	@return false;
}

//TODO : remove / rename this function?
///should extend the default?
@function get-render-value($variants:(),$variant-key:false ,$render:false, $selector: false,$key:false,$description:false ) {

	@if (is-render-key($variants)) {
		$variants: get-single-render-style-props($variants, variants);
	}
	$transformed-data-map: transform-data($variants...);

	$new-list: "";
	@each $key in $variant-key {
		$new-list: _push($new-list, _get($transformed-data-map, $key));
	}
	@return $new-list;
}

//TODO: remove this function?
///this would be used for fonts?
@function get-lookup-prop($variants:(),$variant-key:false, $prop: false ) {

	@if (is-render-key($variants)) {
		$variants: get-single-render-style-props($variants, variants);
	}
	$transformed-data-map: transform-data($variants...);

	//TODO: make this work with multiple sub props
	$new-list: ();
	@each $key in $variant-key {
		$new-list: _push($new-list, _get($transformed-data-map, $key));
	}
	@if (length($new-list)== 1 and _is-map(_first($new-list)) == false) {
		//@debug " NEW IST:: #{_is-map(_first($new-list))}";
		@return _first($new-list);
		//TODO : fix this..
	}

	@if ($prop) {
		@return _get($transformed-data-map, ($variant-key, $prop));
	}
	@return $new-list;
}

@function get-collection-prop($collection:false,$variant-key:false, $prop: false ) {
	@if ($collection and $variant-key) {
		$collection: get-collection($collection, $variant-key);
	}
	@debug "collection TYPE IS #{type-of($collection)}";
	$new-list: "";

	/*$transformed-data-map: transform-data($variants...);


	//TODO: make this work with multiple sub props
	@each $key in $variant-key {

		$new-list: _push($new-list, _get($transformed-data-map, $key));
	}
	@if ($prop) {
		@return _get($transformed-data-map, ($variant-key, $prop));
	}*/
	@return $new-list;
}

/// ways to check the render map
@function is-render-map($map) {
	@if (_has($map, parent)) {
		@return true;
	}
	@return ((_has($map, variants)) and (_has($map, render)));
}

@function is-render-key($collection) {
	@return (( _is-iterable($collection) is false ) and _is-string($collection));
}