@mixin rhythm-padding($horizontal-proportion: 1,$vertical-proportion: 1, $unit: $base-spacing-unit) {
    padding: rhythm-spacing($horizontal-proportion, $unit) rhythm-spacing($vertical-proportion, $unit);
}

@mixin rhythm-margin($horizontal-proportion: 1,$vertical-proportion: 1, $unit: $base-spacing-unit) {
    margin: rhythm-spacing($horizontal-proportion, $unit) rhythm-spacing($vertical-proportion, $unit);
}
@function first($list) {
       @if ( nth($list, 1)){
           @return nth($list, 1);
       }@else {
           @return false;
       }
}

@mixin rhythm-spacing($prop: padding,$scale-definition-key:$default-rhythm-scale-key, $key-list:false,$options:false,$list-value-var: v ) {
    $prop-value-to-write:"";  ///output string
    @if $scale-definition-key==false {
        ////TODO: just do it in 'direct' mode


        ///**************FUNCTION 'DIRECT MODE'
    }@else if ((type-of( $scale-definition-key)==string ) and (function-exists($scale-definition-key))){

        $value-list: $key-list;

        @if ($value-list) {
            @each $current-value, $index in $value-list {

                $i: index($value-list, $current-value);

                @if ($index != null) {
                    $i: $index;
                }

                @if ($options==false) {

                } @else if (type-of($options) == map) {
                    ///call function direct with addicitonal properties
                    $args: ($list-value-var:$current-value); //map default args object
                    $args: map-merge($args, $options);

                    $prop-value-to-write: append($prop-value-to-write, call(get-function($scale-definition-key), $args...));

                } @else if ($options == false) {
                    ///call function direct with list value
                    $prop-value-to-write: append($prop-value-to-write, call(get-function($scale-definition-key), $value-list));
                }
            }
        }
    }@else if (validate-scale-definition-key($scale-definition-key)) {
        //@error ;

        @if (type-of($key-list)==list){

            @each $current-key,$index in $key-list {

                $i: index($key-list, $current-key);

                @if ($index != null){
                    $i:$index;
                }

                @if (is-valid-lookup-key($scale-definition-key, $current-key)) {
                    $prop-value-to-write  : append($prop-value-to-write, get-scale-value($scale-definition-key, $current-key));
                }
            }

        }


    }

    #{$prop}: #{$prop-value-to-write};
    @debug "using scale '#{$scale-definition-key}' to WRITE CSS #{$prop} : #{$prop-value-to-write}";
}

