//@import "abstraction-object-placeholders";

///ABSTRATION OBJECTS.

//********CONTAINERS///
@mixin u-full-width-container($height: 100%, $min-height: $height) {
    width: 100vw;
    height: $height;
    min-height: $min-height;
}

@mixin u-make-container($percent: $content-boxed-indent, $max: $content-max-width) {
    max-width: $max;
    margin: 0 auto;
    width: $percent;
}

@mixin u-default-container() {
    @include u-make-container($content-boxed-width);

    @include breakpoint-range(sm, "<=") {
        @include u-make-container($content-boxed-width-mobile);
    }
}

//********VISUAL OBJECTS ///
@mixin u-icon-svg($color:red,$width: 100%,$height:$width) {
    width: $width;
    height: $height;
    display: inline-block;

    svg {
        display: block;
        width: 100%;
        height: 100%;

        $props: (
            background: false,
            foreground:false,
            fill: $color
        );
        @if ($color!=false) {
            @include g-color-scheme($props...);
        }
    }
}

//********VISUAL OBJECTS ///
@mixin new-icon-svg($color:red,$width: 100%,$height:$width) {

    //unit: except  number with absolute unit, number without ( scale ) , or size key ( string)
    //color: except prop map, color, or false.

    @if(type-of($color) == map){
        //use props
        $props: $color;
    }@else if(type-of($color) == color){
        $props: (
            background: false,
            foreground:false,
            fill: $color
        );
    }

    width: $width;
    height: $height;
    display: inline-block;

    svg {
        display: block;
        width: 100%;
        height: 100%;

        $props: (
            background: false,
            foreground:false,
            fill: $color
        );
        @if ($color!=false) {
            @include g-color-scheme($props...);
        }
    }
}




@mixin o-icon-svg($color:false, $scale-unit: $default-scale-unit) {

    @if (type-of($scale-unit) == number) {
        @include dry('icon-inline-svg-#{$scale-unit}', $DRY_ENABLED) {
            @include u-icon-svg($color, ms($scale-unit));
        }
    } @else if (type-of($scale-unit)== string) {

        @include dry('icon-inline-svg-#{$scale-unit}', $DRY_ENABLED) {
            @include u-icon-svg($color, ms(get-scale-units($scale-unit)));
        }
    } @else {
        @debug '!!!! UNIT ERROR';
    }
}

@mixin u-round($value, $type: all){

    @if ( $type == all ){
        border-radius:$value;
    }@else if ( $type == right ){
        border-top-right-radius:$value;
        border-bottom-right-radius:$value;
    }@else if ( $type == left ){
        border-top-left-radius:$value;
        border-bottom-left-radius:$value;
    }
}

///TODO: move this - UTILITY PLACEHOLDERS FOR BUTTONS OR ICONS.
%u-reflect{
    @include u-reflect-X();
}
%u-no-border {
    border: none;
}

///use u-round


%u-circle {
    border-radius:100%;
}

%u-placeholder-icon-svg {
    display: inline-block;

    svg {
        display: block;
        width: 100%;
        height: 100%;
    }
}

@import "wrappers";
@import "section-wrapper";