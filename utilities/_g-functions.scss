/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

@function rgba-background($hexcolor: color(background), $opacity: 0.5) {
	@debug rgba($hexcolor, $opacity);
	@return rgba($hexcolor, $opacity);
}

//shorthand for setting-get
@function setting( $key: '' ) {
	@return setting-get($key);
}

@function map-set($map, $key, $value) {
	$new: ($key: $value);
	@return map-merge($map, $new);
}
@function map-set-all($map,$-value) {
	$newmap: ();
	@each $key, $value in $map {
		$newmap: map-set($newmap, $key, $-value);
	}
	@return $newmap;
}

@function remove-list-duplicates($list, $recursive: false) {
	$result: ();

	@each $item in $list {
		@if not index($result, $item) {
			@if length($item) > 1 and $recursive {
				$result: append($result, remove-duplicates($item, $recursive));
			} @else {
				$result: append($result, $item);
			}
		}
	}

	@return $result;
}

@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}
	@return $number;
}

@function extend($obj, $ext-obj) {
	@return map-merge($obj, $ext-obj);
}

@function contains($list, $item) {
	@return index($list, $item) != null;
}

@function ratio( $unit: 15px, $rw:1, $rh:1) {
	@return ($unit * $rw) ($unit * $rh);
}

@function u-header-selector(){
	@return 'h1, h2, h3, h4, h5, h6';
}
@function get-contrast-color($color) {
	@if (lightness($color) > 50) {
		@return #000000; // Lighter backgorund, return dark color
	} @else {
		@return #ffffff; // Darker background, return light color
	}
}
@function to-list($value) {
	@return if(type-of($value) != list, ($value,), $value);
}

@function has-unit( $number ) {
	@if (str-length( unit($number)) == 0) {
		@return false;
	} @else {
		@return true;
	}
}
@function dependancy-check($func/*function*/
) {
	@debug "DEPENDENCY CHECK FOR #{$func}";
	$found: false;
	@if mixin-exists($func) {
		$found: true;
	} @else if function-exists($func) {
		$found: true;
	}
	@return $found;
}

@function get-enabled-g-functions(){
	@return true;
}
@function is-module-enabled(){
//function-exists(get-module-rhythm-spacing)
}

@function insert-nth($list, $index, $value) {
	$result: null;

	@if type-of($index) != number {
		@warn "$index: #{quote($index)} is not a number for `insert-nth`.";
	} @else if $index < 1 {
		@warn "List index 0 must be a non-zero integer for `insert-nth`";
	} @else if $index > length($list) {
		@warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
	} @else {
		$result: ();

		@for $i from 1 through length($list) {
			@if $i == $index {
				$result: append($result, $value);
			}

			$result: append($result, nth($list, $i));
		}
	}

	@return $result;
}