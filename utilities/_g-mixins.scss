@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin container-padding() {

	padding: rhythm(1, ms(0))/2 rhythm(1, ms(0));
}

@mixin center-align {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin center-align-horz {
	position: relative;
	left: 50%;
	transform: translateX(-50%);
}

@mixin u-stick-to( $sides:bottom left,$selector: '*:last-child', $reset-child-rhythm: true ) {
	position: relative;

	#{$selector} {
		position: absolute;
		@if ( $reset-child-rhythm == true){
			//@extend %u-reset-rhythm;
		}
		@for $i from 1 through length($sides) {
			#{nth($sides, $i)} : 0;
		}
		@content;
	}
}
@mixin u-stick( $sides:bottom left, $reset-child-rhythm: true ) {

		position: absolute;
		@if ( $reset-child-rhythm == true){
			//@extend %u-reset-rhythm;
		}
		@for $i from 1 through length($sides) {
			#{nth($sides, $i)} : 0;
		}
		@content;
}

@mixin u-float-rhythm($float:none) {

	float: $float;

	@if ($float == left) {
		margin: rhythm(1) rhythm(2) rhythm(1) 0;

	} @else if ($float == right) {
		margin: rhythm(1) 0 rhythm(1) rhythm(2);
	} @else {
		margin: rhythm(1);
	}
	@include breakpoint-range(sm, "<=") {
		float: none;
		@include center-align-horz;
		margin: rhythm(1) 0;
	}
}

//TODO fix this fussy path
@mixin font-face($family, $path: '../fonts/icons' ){
	@at-root {
		@font-face {

			font-family: $family;
			src: url('#{$path}.eot');
			src: url('#{$path}.eot?#iefix') format('embedded-opentype'), url('#{$path}.woff') format('woff'), url('#{$path}.ttf') format('truetype'), url('#{$path}.svg#icons') format('svg');
			font-weight: normal;
			font-style: normal;
		}
	}
}

/* @include transition(all,2s,ease-out); */
@mixin u-transition($what: all, $time: 0.2s, $how: ease-in-out) {
	-webkit-transition: $what $time $how;
	-moz-transition:    $what $time $how;
	-ms-transition:     $what $time $how;
	-o-transition:      $what $time $how;
	transition:         $what $time $how;
}

@mixin u-reflect-X(){
	-moz-transform: scale(-1, 1);
	-webkit-transform: scale(-1, 1);
	-o-transform: scale(-1, 1);
	-ms-transform: scale(-1, 1);
	transform: scale(-1, 1);
}
@mixin u-reflect-Y(){
	-moz-transform: scale(1, -1);
	-webkit-transform: scale(1, -1);
	-o-transform: scale(1, -1);
	-ms-transform: scale(1, -1);
	transform: scale(1, -1);
}


// A Sass walk function,
// Calling a given function to each member of a list
// ---
// @param [list] $list: list to walk through
// @param [string] $function: function to apply to all members
// @param [argList] $args: extra arguments to pass to the function
// ---
// @return [list] $list: updated list
@function walk($list, $function, $args...) {
	@if not function-exists($function) {
		@warn "There is no `#{$function}` function.";
		@return false;
	}

	@for $i from 1 through length($list) {
		$list: set-nth($list, $i, call(get-function($function), nth($list, $i), $args...));
	}

	@return $list;
}

@function add($a, $b) {
	@return $a + $b;
}

sass {
	// Applying color functions to a list of colors
	test: walk(red green blue, complement);
	test: walk(red green blue, darken, 20%);

	// Applying string functions to a list of strings
	test: walk(one two three, to-upper-case);

	// Chaining two walk functions
	//test: walk(walk(3 6 9, add, 10), sqrt);

	// Unknown function
	//test: walk(test, 'gloubiboulga');
}