@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin container-padding() {

	padding: rhythm(1, ms(0))/2 rhythm(1, ms(0));
}

@mixin center-align {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin center-align-horz {
	position: relative;
	left: 50%;
	transform: translateX(-50%);
}

@mixin u-stick-to( $sides:bottom left,$selector: '*:last-child', $reset-child-rhythm: true ) {
	position: relative;

	#{$selector} {
		position: absolute;
		@if ( $reset-child-rhythm == true){
			//@extend %u-reset-rhythm;
		}
		@for $i from 1 through length($sides) {
			#{nth($sides, $i)} : 0;
		}
		@content;
	}
}
@mixin u-stick( $sides:bottom left, $reset-child-rhythm: true ) {

		position: absolute;
		@if ( $reset-child-rhythm == true){
			//@extend %u-reset-rhythm;
		}
		@for $i from 1 through length($sides) {
			#{nth($sides, $i)} : 0;
		}
		@content;
}

@mixin u-float-rhythm($float:none) {

	float: $float;

	@if ($float == left) {
		margin: rhythm(1) rhythm(2) rhythm(1) 0;

	} @else if ($float == right) {
		margin: rhythm(1) 0 rhythm(1) rhythm(2);
	} @else {
		margin: rhythm(1);
	}
	@include breakpoint-range(sm, "<=") {
		float: none;
		@include center-align-horz;
		margin: rhythm(1) 0;
	}
}

@mixin setType($size-unit: 0,$font: font-san-serif ) {
//TODO : fix
	$required-font-props: (font-family, letter-spacing, word-spacing, text-transform, text-decoration, font-style, font-weight);
	$font-map: setting($font);

	@include dry(#{$font}-#{$size-unit},$DRY_ENABLED) {
		@include adjust-font-size-to(ms($size-unit));
	}
	@include dry($font,$DRY_ENABLED) {
		@for $i from 1 through length($required-font-props) {
			#{nth($required-font-props, $i)}: map-get($font-map, nth($required-font-props, $i));
		}
	}
}

@mixin base-component($key,$color-scheme: $chroma-active-scheme){
	@include dry(#{$key}-#{$color-scheme}) {

		@include color-scheme($color-scheme, true, false);
	}
	@include dry(#{$key}-#{container-padding}) {

		@include container-padding;
	}
	@content;
}


//TODO fix this fussy path
@mixin font-face($family, $path: '../fonts/icons' ){
	@at-root {
		@font-face {

			font-family: $family;
			src: url('#{$path}.eot');
			src: url('#{$path}.eot?#iefix') format('embedded-opentype'), url('#{$path}.woff') format('woff'), url('#{$path}.ttf') format('truetype'), url('#{$path}.svg#icons') format('svg');
			font-weight: normal;
			font-style: normal;
		}
	}
}