//*** THESE ARE THE CORE BREAKPOINT WRAPPER
//*** Dependencies: Breakpoint Sass  | Breakpoint Slicer

$slicer-breakpoints:        0        480px       768px      992px        1200px !default;

/*
//                          └────┬────┘ └────┬────┘ └────┬────┘ └────┬────>
// Slice numbers:                xs          sm           md          lg     */

$slicer-breakpoint-names:xs sm md lg!default ;

//using a wrapper mixin for breakpoint sliders vague/wierd function names to(sm), from(md), between(sm,md) , at(sm)
/* EXAMPLES:
@include breakpoint-range(sm, "<=") {  } applied when browser window width is less than or inside the sm slice 'to(sm)'
@include breakpoint-range(md, "<=") {  } applied when browser window width is greater than or inside the md slice 'from(md)'
@include breakpoint-range(sm, md) {  } applied when browser window width is inside and between the sm and md slices 'between(sm,md)'
@include breakpoint-range(sm) {  } or @include breakpoint(sm) {  } applied when width is inside the sm slice 'at(sm)'
 */

//this is a 'wrapper' for breakpoint slicer's stupid function names. see variables-site/structure
@mixin breakpoint-range(  $point:sm, $operator: false  ) {
    @if ($operator == '>=') {
        @include from($point) {
            @content;
        }
    } @else if ($operator == "<=") {
        @include to($point) {
            @content;
        }
    } @else if ( $operator == "=") or ($operator == "==") {
        @include at($point) {
            @content;
        }
    } @else if ($operator == false) {
        @include at($point) {
            @content;
        }
    } @else if (contains($slicer-breakpoint-names, $operator)) {
        @include between($point, $operator) {
            @content;
        }

    }
}

@mixin debug-breakpoints(){

    @include breakpoint-range(xs){
        background: red;
    }
    @include breakpoint-range(sm){
        background: orange;
    }
    @include breakpoint-range(md){
        background: yellow;
    }
    @include breakpoint-range(lg){
        background: green;
    }
}