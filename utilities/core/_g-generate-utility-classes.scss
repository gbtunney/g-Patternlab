//*** THESE GENERATE CORE UTILITY CLASSES FOR COLOR SWATCHES, SCHEMES, and TYPE.
//*** Dependancies: Chroma Sass

$utility-seperator: '-' !default;

$utility-prefixes: (
    swatch: "swatch-color",
    scheme: "scheme",
    padding: "rhythm-padding",
    type: "type") !default;

$default-scale-unit: sm !default;

$scale-lookup-units: (
    xxs: -2,
    xs: -1,
    sm: 0,
    md: 1,
    lg: 2,
    xl: 3,
    xxl: 4,
    xxxl: 5
) !default;

@function get-scale-units($key: 0) {

    @if (type-of($key)== number) {
        @return $key;
    } @else if (type-of(string)) {
        @return map-get($scale-lookup-units, $key);
    } @else {
        @debug "ALERT !!! scale unit: #{$key} type error";
    }
}

@function get-utility-prefix($utility-type-key, $key:'' ) {
    @return #{map-get($utility-prefixes,$utility-type-key)}#{$utility-seperator}#{$key};
}

//*****GENERATES SWATCH (background with inverted text)
@mixin g-generate-swatches($colors: $baseColors) {
    @each $key, $color in $colors {
        @include utility(get-utility-prefix(swatch, $key)) {

            $props: (
                background: $color,
                foreground: invert($color)
            );
            @include g-color-scheme($props...);
        }
    }
}

//*****GENERATES SCHEME (with flags for accent and borders.)

/*
Generator for Scheme Utility Classes
:hover             - Subtle hover highlight.
.--accent           - uses scheme accent added to h1,h2,h3,h4,h5,a.
.--border           - uses scheme border and adds a 1 px border.
.--icon             - uses scheme foreground to fill inline svg
.--icon.--accent    - uses scheme accent to fill inline svg

Styleguide 2.1.3.
*/

@mixin g-generate-scheme-utility-classes() {

    //todo: only render list?
    @for $i from 1 through length($schemes) {
        $scheme: nth($schemes, $i);
        $key: map-get($scheme, key);

        @include utility(get-utility-prefix(scheme, $key)) {

            $props: (background: true, foreground: true, border: true, fill:foreground);
            @include g-color-scheme($key, $props...);

            &.--accent {
                @include g-color-scheme($key, false, false, true, false);
            }
            &.--no-border {
                border: none;
            }
            &.--icon {

                $props: (background: false, foreground: false, border: false, fill:true);
                @include g-color-scheme($key, $props...);

                &.--accent {
                    $props: (background: false, foreground: false, border: false, fill:accent);
                    @include g-color-scheme($key, $props...);
                }
            }
        }
    }
}

///**** GENERATE TYPE CLASSES.

//single font
@mixin g-generate-font-utility-classes( $font-key: font-san-serif ) {

    @each $unit-key, $unit-value in $scale-lookup-units {
        ///TODO: reimplement dry?
        @include utility(get-utility-prefix(type, #{$font-key}#{$utility-seperator}#{$unit-key})) {
            @include setType($unit-value, $font-key);
        }
        @if ($unit-key == $default-scale-unit) {
            @include utility(get-utility-prefix(type, #{$font-key})) {
                @include setType($unit-value, $font-key);
            }
        }
    }
}

@mixin g-reset-link-font() {

}

@mixin g-generate-all-font-utility-classes($font-render: $font-map ) {
    @each $key, $prop in $font-map {
        @if ($key != 'default') {
            @include g-generate-font-utility-classes($key);
        }
    }
}

@mixin g-generate-utility-padding() {

    @each $unit-key, $unit-value in $scale-lookup-units {
        @include utility(get-utility-prefix(padding, "#{$unit-key}#{$utility-seperator}1_2")) {
            padding: rhythm($unit-value) rhythm($unit-value);
        }
        @include utility(get-utility-prefix(padding, $unit-key)) {
            padding: rhythm($unit-value * .5) rhythm($unit-value);
        }
    }
}

@mixin g-generate-static-utility-classes() {

    $prefix: #{map-get($bem-block-namespaces,utility)}#{$utility-seperator};
    //********* RESET *********//
    .#{$prefix}reset-link-color {
        @extend %u-reset-link-color;
    }
    .#{$prefix}reset-link-font {
        a, a:hover {
            @include resetType;
        }
    }
    .#{$prefix}reset-children-color {
        @extend %u-reset-children-color;
    }
    .#{$prefix}reset-header-color {
        @extend %u-reset-header;
    }
    .#{$prefix}reset-rhythm {
        @extend %u-reset-rhythm;
    }

    //********* BORDERS *********//
    .#{$prefix}border-trailing, .#{$prefix}underline {
        @include trailing-border();
    }
    .#{$prefix}border-left {
        @include apply-side-rhythm-border(left);
    }
    .#{$prefix}-border-right {
        @include apply-side-rhythm-border(right);
    }

    //********* RHYTHM FLOATS *********//
    .#{$prefix}float-left {
        @include u-float-rhythm(left);
    }
    //rhthm float right
    .#{$prefix}float-right {
        @include u-float-rhythm(right);
    }

    //********* LEADERS *********//
    .#{$prefix}leader {
        @include leader(1);
    }
    .#{$prefix}leader-lg {
        @include leader(2);
    }
    .#{$prefix}leader-margin {
        @include margin-leader(1);
    }
    .#{$prefix}leader-margin-lg {
        @include margin-leader(2);
    }

    //********* TRAILERS *********//
    .#{$prefix}trailer {
        @include trailer(1);
    }
    .#{$prefix}trailer-lg {
        @include trailer(2);
    }
    .#{$prefix}trailer-margin- {
        @include margin-trailer(1);
    }
    .#{$prefix}trailer-margin-lg {
        @include margin-trailer(2);
    }

    //********* INDENTS *********//
    .#{$prefix}indent {
        padding-left: rhythm(1);
    }
    .#{$prefix}indent-lg {
        padding-left: rhythm(2);
    }
}


