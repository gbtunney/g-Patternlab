/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function rgba-background($hexcolor: color(background), $opacity: 0.5) {
    @debug rgba($hexcolor, $opacity);
    @return rgba($hexcolor, $opacity);
}

//shorthand for setting-get
@function setting( $key: '' ) {
    @return setting-get($key);
}

/// https://css-tricks.com/snippets/sass/deep-getset-maps/
/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
    $maps: ($map,);
    $result: null;

    // If the last key is a map already
    // Warn the user we will be overriding it with $value
    @if type-of(nth($keys, -1)) == "map" {
        @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
    }

    // If $keys is a single key
    // Just merge and return
    @if length($keys) == 1 {
        @return map-merge($map, ($keys: $value));
    }

    // Loop from the first to the second to last key from $keys
    // Store the associated map to this key in the $maps list
    // If the key doesn't exist, throw an error
    @for $i from 1 through length($keys) - 1 {
        $current-key: nth($keys, $i);
        $current-map: nth($maps, -1);
        $current-get: map-get($current-map, $current-key);
        @if $current-get == null {
            @error "Key `#{$key}` doesn't exist at current level in map.";
        }
        $maps: append($maps, $current-get);
    }

    // Loop from the last map to the first one
    // Merge it with the previous one
    @for $i from length($maps) through 1 {
        $current-map: nth($maps, $i);
        $current-key: nth($keys, $i);
        $current-val: if($i == length($maps), $value, $result);
        $result: map-merge($current-map, ($current-key: $current-val));
    }

    // Return result
    @return $result;
}

@function map-set($map, $key, $value) {
    $new: ($key: $value);
    @return map-merge($map, $new);
}

@function map-set-all($map,$-value) {
    $newmap: ();
    @each $key, $value in $map {
        $newmap: map-set($newmap, $key, $-value);
    }
    @return $newmap;
}

@function remove-list-duplicates($list, $recursive: false) {
    $result: ();

    @each $item in $list {
        @if not index($result, $item) {
            @if length($item) > 1 and $recursive {
                $result: append($result, remove-duplicates($item, $recursive));
            } @else {
                $result: append($result, $item);
            }
        }
    }

    @return $result;
}

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function extend($obj, $ext-obj) {
    @return map-merge($obj, $ext-obj);
}

@function contains($list, $item) {
    @return index($list, $item) != null;
}

@function ratio( $unit: 15px, $rw:1, $rh:1) {
    @return ($unit * $rw) ($unit * $rh);
}

@function get-contrast-color($color) {
    @if (lightness($color) > 50) {
        @return #000000; // Lighter backgorund, return dark color
    } @else {
        @return #ffffff; // Darker background, return light color
    }
}

@function has-unit( $number ) {
    @if (str-length( unit($number)) == 0) {
        @return false;
    } @else {
        @return true;
    }
}

@function insert-nth($list, $index, $value) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    } @else if $index < 1 {
        @warn "List index 0 must be a non-zero integer for `insert-nth`";
    } @else if $index > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    } @else {
        $result: ();

        @for $i from 1 through length($list) {
            @if $i == $index {
                $result: append($result, $value);
            }
            $result: append($result, nth($list, $i));
        }
    }
    @return $result;
}