// A button suitable for giving a star to someone.
//
// :hover             - Subtle hover highlight.
// .star-given        - A highlight indicating you've already given a star.
// .star-given:hover  - Subtle hover highlight on top of star-given styling.
// .disabled          - Dims the button to indicate it cannot be used.
//
// Styleguide 2.1.3.


//@include absolute-center([$vertical, $horizontal, $fixed, $extend])
/*
Settings

'absolute center fixed': false (fixed position item)
'absolute center extend': false
'absolute center vertical midpoint': 50%
'absolute center fixed horizontal': 0%
'absolute center fixed horizontal midpoint': 50% (horizontal midpoint for fixed position item)
*/
@mixin dimensions($width: 50px,$height:$width){
    width : $width;
    height: $height;
}
@mixin u-stick-to( $sides:bottom left,$selector: '*:last-child', $reset-child-rhythm: true ) {
    position: relative;

    #{$selector} {
        position: absolute;
        @if ( $reset-child-rhythm == true){
            //@extend %u-reset-rhythm;
        }
        @for $i from 1 through length($sides) {
            #{nth($sides, $i)} : 0;
        }
        @content;
    }
}
@mixin u-stick( $sides:bottom left, $reset-child-rhythm: true ) {

    position: absolute;
    @if ( $reset-child-rhythm == true){
        //@extend %u-reset-rhythm;
    }
    @for $i from 1 through length($sides) {
        #{nth($sides, $i)} : 0;
    }
    @content;
}

@mixin u-float-rhythm($float:none) {

    ///TODO:needs rewrite.
    float: $float;

    @if ($float == left) {
        margin: rhythm(1) rhythm(2) rhythm(1) 0;

    } @else if ($float == right) {
        margin: rhythm(1) 0 rhythm(1) rhythm(2);
    } @else {
        margin: rhythm(1);
    }
    @include breakpoint-range(sm, "<=") {
        float: none;
       // @include center-align-horz;
        margin: rhythm(1) 0;
    }
}

/* @include transition(all,2s,ease-out); */
@mixin u-transition($what: all, $time: 0.2s, $how: ease-in-out) {
    -webkit-transition: $what $time $how;
    -moz-transition:    $what $time $how;
    -ms-transition:     $what $time $how;
    -o-transition:      $what $time $how;
    transition:         $what $time $how;
}

@mixin u-reflect-X(){
    -moz-transform: scale(-1, 1);
    -webkit-transform: scale(-1, 1);
    -o-transform: scale(-1, 1);
    -ms-transform: scale(-1, 1);
    transform: scale(-1, 1);
}
@mixin u-reflect-Y(){
    -moz-transform: scale(1, -1);
    -webkit-transform: scale(1, -1);
    -o-transform: scale(1, -1);
    -ms-transform: scale(1, -1);
    transform: scale(1, -1);
}

@mixin input-placeholder($self: false) {

    @if ( $self){
        #{$self}::-webkit-input-placeholder {@content}
        #{$self}:-moz-placeholder           {@content}
        #{$self}::-moz-placeholder          {@content}
        #{$self}:-ms-input-placeholder      {@content}
    }@else{
        ::-webkit-input-placeholder {@content}
        :-moz-placeholder           {@content}
        ::-moz-placeholder          {@content}
        :-ms-input-placeholder      {@content}
    }

}

@mixin font-smoothing($bool: true) {
    @if ($bool) {
        font-smoothing: antialiased;
        -webkit-text-size-adjust: 100%;

        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
        text-rendering: geometricPrecision;
    } @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}
@mixin border-single-side($side: top, $size:1px) {
 border-#{$side}-width: $size;
}

/**
* Sass CSS triangle mixin, create any kind of triangles with ease

* Use:
* @include triangle(direction,width,height,color);

* Example:
* $square: 50px;
* $color: red;
* selector {
*	 @include triangle(bottomright,$square,$square,$color);
* }

* Forked from https://github.com/juanbrujo/triangle-mixin.less
*/

@mixin triangle($direction, $sizeH, $sizeV, $color){
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-style: solid;
    -moz-transform: scale(.9999);

    @if $direction == top {
        border-width: 0 $sizeV $sizeH $sizeV;
        border-color: transparent transparent $color transparent;
    }
    @if $direction == bottom{
        border-width: $sizeV $sizeH 0 $sizeV;
        border-color: $color transparent transparent transparent;
    }
    @if $direction == left{
        border-width: $sizeV $sizeH $sizeV 0;
        border-color: transparent $color transparent transparent;
    }
    @if $direction == right{
        border-width: $sizeV 0 $sizeV $sizeH;
        border-color: transparent transparent transparent $color;
    }
    @if $direction == topright{
        border-width: 0 $sizeH $sizeV 0;
        border-color: transparent $color transparent transparent;
    }
    @if $direction == bottomright{
        border-width: 0 0 $sizeH $sizeV;
        border-color: transparent transparent $color transparent;
    }
    @if $direction == bottomleft{
        border-width: $sizeH 0 0 $sizeV;
        border-color: transparent transparent transparent $color;
    }
    @if $direction == topleft{
        border-width: $sizeH $sizeV 0 0;
        border-color: $color transparent transparent transparent;
    }
}

/**
* Use
*/

$square: 60px;
$color: #ecf0f1;

// BASIC
.top {
    @include triangle(top,$square,$square,$color);
}
.left {
    @include triangle(left,$square/2 ,$square*3,$color);
}
.bottom {
    @include triangle(bottom,$square,$square,$color);
}
.right {
    @include triangle(right,$square,$square,$color);
}
.topright{
    @include triangle(topright,$square,$square,$color);
}
.topleft{
    @include triangle(topleft,$square,$square,$color);
}
.bottomright{
    @include triangle(bottomright,$square,$square,$color);
}
.bottomleft{
    @include triangle(bottomleft,$square,$square,$color);
}

// ADVANCED
.top-scalene {
    @include triangle(top,$square*2,$square/2,$color);
}
.bottomright-scalene {
    @include triangle(bottomright,$square*2,$square,$color);
}
.weird {
    width: $square*2;
    height: $square;
    line-height: $square;
    background-color: $color;
    color: black;
    position: relative;
    text-align: center;
    text-shadow: none;
    cursor: pointer;

    &:after {
        position: absolute;
        left: 0;
        top: -$square;
        @include triangle(top,$square,$square,$color);
    }
    &:before {
        position: absolute;
        left: 0;
        top: $square;
        @include triangle(topleft,$square*2,$square*2,$color);
    }
    &:hover {
        background-color: darken($color,10%);

        &:after {
            @include triangle(top,$square,$square,darken($color,10%));
        }
        &:before {
            @include triangle(topleft,$square*2,$square*2,darken($color,10%));
        }
    }
}

